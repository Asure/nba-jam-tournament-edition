TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "test.asm"
       3                            .width  132
       4                            .option b,d,l,t
       5                            .mnolist
       6                    
       7                            
       8                            .include        "mproc.equ"
       9                            .include        "disp.equ"
      10                            .include        "sys.equ"
      11                            .include        "gsp.equ"
      12                            .include        "imgtbl.glo"
      13                            .include        "game.equ"
      14                            .include        "link.equ"
      15                            .include        "menu.equ"
      16                            .include        "shawn.hdr"             ;Macros
      17                            .include        dipequ.asm
      18                            .include        mac2.asm
      19                    
      20                    
      21                    
      22                            .def            fudge_switches, fudge_switches2, fudge_switches_diag
      23                            .DEF            DIAG,CHK_CMOS
      24                            .DEF            GEN_MENU,B_MENU
      25                            .DEF            TOP_BOX                 ;,WT_ADV
      26                            .DEF            MAIN_RET,GMENULEV
      27                            .DEF            AREUSURE
      28                            .DEF            F_TITLE
      29                            .DEF            ST_STICK
      30                            .DEF            GETSTICK
      31                            .DEF            SUR_MESS
      32                            .DEF            SURE_BOX
      33                            .DEF            CPU_RET
      34                            .DEF            GET_FAC
      35                            .DEF            MENU_TOP
      36                            .DEF            RED_BOX
      37                            .DEF            BLNKHELP,H_SLAVE
      38                            .DEF            DOBORDER
      39                            .DEF            COL_INST
      40                            .DEF            STD_BORD
      41                            .DEF            DIAG_EX
      42                            .DEF            WAIT_BUT
      43                            .DEF            DIGSRT
      44                            .DEF            SND_MADE
      45                            .DEF            NO_CLEAR
      46                            .DEF            LAST_BUT
      47                            .DEF            G_BORDER
      48                            .DEF            FORM_SWS
      49                            .DEF            CKTEST, CKDIAG, DIAG_COLORS
      50                    
      51                    
      52                            .REF            CMOS_VAL,L_MESS
      53                            .REF            LM_SETUP,LM_FINIS
      54                            .REF            FORM_ADC
      55                            .REF            F_ADC_S
      56                            .REF            GET_AUD
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    2

      57                            .REF            FAC_SET
      58                            .REF            CRED_P
      59                            .REF            BAD_AUD
      60                            .REF            CLR_AUD
      61                            .REF            ADJ_PAGE
      62                            .REF            COIN_PAG
      63                            .REF            ROM_NAME
      64                            .REF            STORE_AUDIT
      65                            .REF            INIT_TAB
      66                            .REF            VAL_TAB
      67                            .REF            P_FORK
      68                            .REF            RC_BYTEI
      69                            .REF            RC_BYTE
      70                            .REF            RC_WORD
      71                            .REF            RC_LONG
      72                            .REF            RC_LONGI
      73                            .REF            WC_BYTE
      74                            .REF            WC_BYTEI
      75                            .REF            WC_WORD
      76                            .REF            WC_WORDI
      77                            .REF            WC_LONG
      78                            .REF            WC_LONGI
      79                            .REF            MEN_MAIN,ANY_BUT,MEN_YN
      80                            .REF            MESS_FAC
      81                            .REF            GO_DIAG           ;ROUTINE FOR DIAGNOSTIC MENU
      82                            .REF            RTR_LEV,ROM_LEV
      83                            .REF            FAC_STUF
      84                            .REF            SCODE             ;SYNTH CODE CURRENTLY BEING MADE
      85                            .REF            DCODE             ;DIG CODE CURRENTLY BEING MADE
      86                    
      87                    
      88                            .REF    DO_ADJH, CKDIP, MEN_ADJ
      89                    
      90                    
      91                    
      92                            .REF    WIPEOUT
      93                    
      94                    
      95                    
      96                            .ref    TWOPLAYERS                      ;0 = NO, 1 = YES 2 players
      97                    
      98                            .REF    WARMSET
      99                            .REF    QSNDRST
     100                            .REF    FILLAREA
     101                            .REF    STRNGLEN
     102                    
     103                            .ref    osgfont_t
     104                            .REF    RD15FONT,RD7FONT,STRCNRM,STRCNRM_1,GAMSTATE
     105                            .REF    IRQSKYE,BLNKAREA,STRLNRM,CLR_SCRN
     106                            .REF    P1DATA,P2DATA
     107                            .REF    WDOGDIS, READ_DIP, dpageflip_off, SWSET1, SWSET2
     108                    
     109                            .REF    PALFRAM, pal_set, pal_getf, DIAGP
     110                    
     111                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    3

     112 00000000                   .BSS            MAIN_RET,16           ;FLAG SAYS RETURN TO MAIN MENU
     113 00000010                   .BSS            GMENULEV,16           ;HOW DEEP INTO GEN_MENU WE ARE
     114 00000020                   .BSS            SND_MADE,16           ;SOUND TEST FLAG
     115 00000030                   .BSS            NO_CLEAR,16           ;FLAG TELLS GET_MENU NOT TO CLEAR!
     116 00000040                   .BSS            LAST_BUT,32
     117 00000060                   .BSS            SPTEMP,32             ;STACK POINTER TEMP
     118                    
     119                            .def    fswitches_cur,fswitches_last,fswitches_down
     120                    
     121 00000080                   .bss            fswitches_cur,32
     122 000000a0                   .bss            fswitches_last,32
     123 000000c0                   .bss            fswitches_down,32
     124                    
     125 00000000                   .text
     126                    
     127                    
     128 00000000     f3f7  beep1_snd       .word   0f3f7H,08H,08080H,0     ;MENU BAR MOVE SOUND
     129 00000040     f3f7  SELECT_SND      .word   0f3f7H,08H,08084H,0     ;MENU OPTION SELECT SOUND
     130 00000080     f3df  UHOH            .WORD   0F3DFH,010H,08092H,0    ;FAILURE OF ANY KIND
     131                    
     132                    
     133 000000c0           CPU_RET:
     134 000000c0     0d3f          CALLR   DIGSRT          ;MAKE SURE WE'RE IN TEST MODE
         000000d0     0250  
     135                    
     136 000000e0     5600          CLR     A0
     137 000000f0     0580          MOVE    A0,@GMENULEV    ;INDICATE WE'RE AT LEVEL ZERO.
         00000100 00000010- 
     138                    
     139 00000120     09e0          MOVI    RTR_LEV,A0      ;THIS IS THE LEVEL TO DIVE TO
         00000130 00000000! 
     140 00000150     03a0          NEG     A0              ;NEGATE IT AS FLAG TO DIVE.
     141 00000160     0580          MOVE    A0,@MAIN_RET    ;INDICATE
         00000170 00000000- 
     142 00000190     c080          JAUC    DIAG_RESTART    ;NOW START IT UP....
         000001a0 000006f0' 
     143                    
     144                    
     145                    
     146 000001c0           WAIT_BUT:
     147 000001c0     0d3f          CALLR   FORM_SWS        ;1ST STATE DOESN'T COUNT
         000001d0     06b8  
     148                    
     149                    
     150 000001e0           WB1:    
     151 000001e0                   SLEEPK  1
     152 00000220     0d3f          CALLR   FORM_SWS
         00000230     06b2  
     153 00000240     03e1          NOT     A1              ;LAST = 0 AND NOW = 1 MEANS EDGE!
     154                    
     155 00000250     5020          AND     A1,A0           ;1'S WHERE WE HAVE POSITIVE EDGE.
     156 00000260     0b80          ANDI    BUTTONS,A0      ;IS IT A BUTTON?
         00000270 ffff0f0f  
     157 00000290     caf4          JRZ     WB1
     158 000002a0                   SOUND1  beep1_snd
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    4

     159 00000300                   RETP
     160                    
     161                    
     162 00000330           CKTEST
     163 00000330                   PUSH    A0
     164 00000340     0d5f          CALLA   READ_DIP
         00000350 00000000! 
     165 00000370     0b80          ANDI    DPTEST,A0
         00000380 ffffff7f  
     166 000003a0     cb0a          JRNZ    CKRET
     167 000003b0     07a0          MOVE    @SWITCH,A0,L
         000003c0 01600000  
     168 000003e0     03e0          NOT     A0
     169 000003f0     0b80          ANDI    DIAG_BITS,A0
         00000400 ffefffff  
     170 00000420     ca80          JAZ     WARMSET                 ; WE BE OUTTA HERE!
         00000430 00000000! 
     171 00000450           CKRET
     172 00000450                   PULL    A0
     173 00000460     0960          RETS
     174                    
     175                    
     176 00000470           CKDIAG
     177 00000470     5600          CLR     A0
     178 00000480     0d5f          CALLA   READ_DIP
         00000490 00000000! 
     179 000004b0     0b80          ANDI    DPTEST,A0
         000004c0 ffffff7f  
     180 000004e0     cb08          JRNZ    CKDGO
     181 000004f0     07a0          MOVE    @SWITCH,A0,L
         00000500 01600000  
     182 00000520     03e0          NOT     A0
     183 00000530     0b80          ANDI    DIAG_BITS,A0
         00000540 ffefffff  
     184 00000560     ca01          JRZ     CKDRET
     185 00000570           CKDGO
     186 00000570     1820          MOVK    1,A0
     187 00000580           CKDRET
     188 00000580     4c00          MOVE    A0,A0
     189 00000590     0960          RETS
     190                    
     191                    
     192 000005a0           DIAG
     193 000005a0     09c0          movi    AUDSTAT,a0
         000005b0     0018  
     194 000005c0     5621          clr     a1
     195 000005d0     0d5f          calla   STORE_AUDIT
         000005e0 00000000! 
     196 00000600     05a0          move    @GAMSTATE,a0
         00000610 00000000! 
     197 00000630     ce80          jan     SUCIDE          ;In diagnostics
         00000640 00000000! 
     198                    
     199 00000660           DIAG_JUMP
     200 00000660     0d3f          CALLR   DIGSRT          ;MAKE SURE WE'RE IN TEST MODE
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    5

         00000670     01f6  
     201                    
     202 00000680     5600          CLR     A0
     203 00000690     0580          MOVE    A0,@MAIN_RET    ;CLEAR THE FLOAT TO TOP FLAG.
         000006a0 00000000- 
     204 000006c0     0580          MOVE    A0,@GMENULEV    ;INDICATE WE'RE AT LEVEL ZERO.
         000006d0 00000010- 
     205                    
     206 000006f0           DIAG_RESTART
     207 000006f0     09e8          MOVI    MEN_MAIN,A8
         00000700 00000000! 
     208 00000720                   JSRP    GEN_MENU        ;PROCESS THIS MENU!
     209                    
     210                    
     211 00000790           DIAG_EX
     212 00000790                   SLEEPK  2               ;LET DMA EMPTY OUT IF NECESSARY
     213                    
     214                    
     215                    
     216                    
     217                    
     218 000007d0     0d5f          CALLA   CLR_SCRN
         000007e0 00000000! 
     219 00000800     0d5f          CALLA   CMOS_VAL                ; VALIDATE THE CMOS
         00000810 00000000! 
     220 00000830     0d5f          CALLA   CKTEST
         00000840 00000330' 
     221 00000860     0d5f          CALLA   READ_DIP
         00000870 00000000! 
     222 00000890     0b80          ANDI    DPTEST,A0
         000008a0 ffffff7f  
     223 000008c0     0780          MOVE    A0,@SWSET2,L
         000008d0 00000000! 
     224 000008f0     ca0b          JRZ     DE2
     225 00000900     09e8          MOVI    NOTCLOSEDDIP,A8
         00000910 00000fd0' 
     226 00000930                   JSRP    L_MESS
     227 000009a0     c01e          jruc    bmriout
     228 000009b0           DE2
     229 000009b0     07a0          MOVE    @SWITCH,A0,L
         000009c0 01600000  
     230 000009e0     03e0          NOT     A0
     231 000009f0     0b80          ANDI    DIAG_BITS,A0
         00000a00 ffefffff  
     232 00000a20     07ae          MOVE    @SWSET2,A14,L
         00000a30 00000000! 
     233 00000a50     540e          OR      A0,A14
     234 00000a60     078e          MOVE    A14,@SWSET2,L
         00000a70 00000000! 
     235 00000a90     4c00          MOVE    A0,A0
     236 00000aa0     ca0b          JRZ     DE3
     237 00000ab0     09e8          MOVI    NOTCLOSEDJAMMA,A8
         00000ac0 000011c0' 
     238 00000ae0                   JSRP    L_MESS
     239 00000b50     c003          jruc    bmriout
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    6

     240 00000b60           DE3
     241 00000b60     c080          JAUC    WARMSET         
         00000b70 00000000! 
     242 00000b90           bmriout
     243 00000b90     09e8          MOVI    NOTCLOSEDWAIT,A8
         00000ba0 00001360' 
     244 00000bc0                   JSRP    L_MESS
     245                    
     246 00000c30     0d5f          CALLA   fudge_switches          ;get fudged switches in a0
         00000c40 00006dd0' 
     247 00000c60     0b80          andi    BUTTONS|START_BITS,a0
         00000c70 f9db0f0f  
     248 00000c90     0780          MOVE    A0,@SWSET1,L
         00000ca0 00000000! 
     249 00000cc0           DE4
     250 00000cc0                   SLEEPK  1                       ;APPEASE THE MAIN LOOP
     251 00000d00     0d3f          CALLR   CKTEST                  ;CHECK STATUS OF TEST SWITCH
         00000d10     ff61  
     252                    
     253 00000d20     0d5f          CALLA   fudge_switches          ;get fudged switches in a0
         00000d30 00006dd0' 
     254 00000d50     07a1          MOVE    @SWSET1,A1,L
         00000d60 00000000! 
     255 00000d80     0b80          andi    BUTTONS|START_BITS,a0
         00000d90 f9db0f0f  
     256 00000db0     4801          CMP     A0,A1
     257 00000dc0     cb1c          JRNZ    DE5
     258                    
     259                    
     260 00000dd0     07a3          MOVE    @SWSET2,A3,L
         00000de0 00000000! 
     261 00000e00     4c61          MOVE    A3,A1
     262 00000e10     0d5f          CALLA   READ_DIP
         00000e20 00000000! 
     263 00000e40     0b80          ANDI    DPTEST,A0
         00000e50 ffffff7f  
     264 00000e70     0b81          ANDI    DPTEST,A1
         00000e80 ffffff7f  
     265 00000ea0     4801          CMP     A0,A1
     266 00000eb0     cb8d          JRNE    DIAG_EX
     267                    
     268                    
     269 00000ec0     07a0          MOVE    @SWITCH,A0,L            ;GOTTA SEE IF TIME TO LEAVE
         00000ed0 01600000  
     270 00000ef0     03e0          NOT     A0
     271 00000f00     0b80          ANDI    DIAG_BITS,A0
         00000f10 ffefffff  
     272 00000f30     0b83          ANDI    DIAG_BITS,A3
         00000f40 ffefffff  
     273 00000f60     4803          CMP     A0,A3
     274 00000f70     cb81          JRNE    DIAG_EX
     275                    
     276 00000f80     c0d3          JRUC    DE4
     277                    
     278 00000f90           DE5
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    7

     279 00000f90     0d3f          CALLR   CKTEST                  ; ONE FINAL TIME ( STILL WRONG )
         00000fa0     ff38  
     280 00000fb0     c000          JRUC    DIAG_JUMP
         00000fc0     ff69  
     281                    
     282                    
     283 00000fd0           NOTCLOSEDDIP
     284 00000fd0                   MESS_MAC RD7FONT,SPACING07,200,50,COLOR_RED,STRCNRM,0
     285 00001070       44          .STRING "DIPSWITCH TEST SELECT (UJ2 # 8) CLOSED.",0,0
     286 000011c0                   .EVEN
     287                    
     288 000011c0           NOTCLOSEDJAMMA
     289 000011c0                   MESS_MAC RD7FONT,SPACING07,200,70,COLOR_RED,STRCNRM,0
     290 00001260       43          .STRING "COIN DOOR TEST SWITCH CLOSED.",0,0
     291 00001360                   .EVEN
     292                    
     293 00001360           NOTCLOSEDWAIT
     294 00001360                   MESS_MAC RD7FONT,SPACING07,200,120,COLOR_RED,STRCNRM,0
     295 00001400       50          .STRING "PRESS ANY BUTTON TO RETURN TO TEST MODE OR",0,1
     296 00001560                   .EVEN
     297 00001560                   MESS_MAC RD7FONT,SPACING07,200,132,COLOR_RED,STRCNRM,0
     298 00001600       4f          .STRING "OR",0,1
     299 00001620                   .EVEN
     300 00001620                   MESS_MAC RD7FONT,SPACING07,200,144,COLOR_RED,STRCNRM,0
     301 000016c0       4f          .STRING "OPEN THE SWITCH(S) TO RETURN TO GAME.",0,0
     302 00001800                   .EVEN
     303                    
     304              0000  MR_FONT   EQU     0
     305              0020  MR_TCAL   EQU     MR_FONT+LONG_SIZE
     306              0040  MR_TITLE  EQU     MR_TCAL+LONG_SIZE     ;POINTER TO TITLE FOR TILE BOX (IF NEC)
     307              0060  MR_TCLR   EQU     MR_TITLE+LONG_SIZE    ;COLOR OF TITLE
     308              0070  MR_WORDS  EQU     MR_TCLR+WORD_SIZE     ;STREAM OF WORDS TO COPY TO PDATA STARTS HERE
     309              0070  MR_X      EQU     MR_WORDS
     310              0080  MR_Y      EQU     MR_X+WORD_SIZE
     311              0090  MR_DY     EQU     MR_Y+WORD_SIZE
     312              00a0  MR_COL    EQU     MR_DY+WORD_SIZE
     313              00b0  MR_HITE   EQU     MR_COL+WORD_SIZE
     314              00c0  MR_BDY    EQU     MR_HITE+WORD_SIZE
     315              00d0  MR_DX     EQU     MR_BDY+WORD_SIZE
     316              00e0  MR_WID    EQU     MR_DX+WORD_SIZE
     317                            
     318 00001800           GEN_MENU
     319 00001800     05a0          MOVE    @GMENULEV,A0            ;KICK LEVEL POINTER
         00001810 00000010- 
     320 00001830     1020          INC     A0
     321 00001840     0580          MOVE    A0,@GMENULEV
         00001850 00000010- 
     322                    
     323 00001870     a30c          MOVE    A8,-*A12,L              ;SAVE MENU PTR
     324 00001880     1828          movk    1,A8                    ;START WITH "FIRST" ENTRY
     325 00001890     a10c          MOVE    A8,-*A12,W              ;PUT MENU NUMBER AS A WORD
     326                    
     327                    
     328                    
     329 000018a0           GEN_LOOP
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    8

     330 000018a0     05a0          MOVE    @MAIN_RET,A0            ;ARE WE IN "EXIT" MODE?
         000018b0 00000000- 
     331 000018d0     ca0a          JRZ     NO_EXIT                 ;NO
     332                    
     333 000018e0     ce44          JRN     DIVE_TO_MONITOR         ;WE'RE DIVING TO MONITOR PATTERNS.
     334                    
     335 000018f0     05a0          MOVE    @GMENULEV,A0            ;CHECK LEVEL
         00001900 00000010- 
     336 00001920     1420          subk    1,a0                    ;are we at level 1
     337 00001930     cb33          jrne    GEN_EXIT                ;NOPE.....POP UP A LEVEL.
     338                    
     339                    
     340 00001940           DIVE_COMPLETE
     341 00001940     5600          CLR     A0
     342 00001950     0580          MOVE    A0,@MAIN_RET            ;NOW WE MAY PROCEED!
         00001960 00000000- 
     343                    
     344 00001980           NO_EXIT
     345 00001980     05a0          MOVE    @NO_CLEAR,A0            ;INHIBIT CLEAR?
         00001990 00000030- 
     346 000019b0     cb04          JRNZ    SKIP_CLR
     347 000019c0     57bd          CLR     B13
     348 000019d0     0d5f          CALLA   CLR_SCRN                ;CLEAR THE SCREEN
         000019e0 00000000! 
     349                    
     350 00001a00           SKIP_CLR
     351 00001a00     5600          CLR     A0
     352 00001a10     0580          MOVE    A0,@NO_CLEAR            ;AND RE-SET IT!
         00001a20 00000030- 
     353                    
     354 00001a40     b788          MOVE    *A12(WORD_SIZE),A8,L    ;GET MENU DESCRIPTOR
         00001a50     0010  
     355 00001a60                   JSRP    MENU_TOP
     356 00001ad0                   JSRP    RED_BOX         ;PUT UP MAIN MENU INSTRUCTIONS
     357                    
     358 00001b40     8589          MOVE    *A12,A9                 ;GET MENU NUMBER TO USE
     359 00001b50                   JSRP    B_MENU                  ;GET RESULT
     360                    
     361 00001bc0           PHONEY_MENU_RET
     362                    
     363 00001bc0     4d4a          MOVE    A10,A10                 ;WAS IT ADVANCE?
     364 00001bd0     ca01          JRZ     NO_KICK                 ;NOPE....LEAVE WHERE HE CAME FROM
     365                    
     366 00001be0     1028          INC     A8                      ;KICK INDEX BY 1 FOR NEXT TIME
     367 00001bf0           NO_KICK
     368 00001bf0     810c          MOVE    A8,*A12                 ;AND LEAVE ON THE STACK
     369                    
     370 00001c00     4d29          MOVE    A9,A9                   ;NOW JSRP THE ROUTINE
     371 00001c10     ca05          JRZ     GEN_EXIT                ;NONE THERE....ITS "EXIT"
     372                    
     373                    
     374 00001c20     09e7          MOVI    GEN_LOOP,A7
         00001c30 000018a0' 
     375 00001c50     a2ec          MOVE    A7,-*A12,L              ;PUSH RET ADDR
     376 00001c60     0169          JUMP    A9
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE    9

     377                    
     378 00001c70           GEN_EXIT
     379 00001c70     0b0c          ADDI    WORD_SIZE+LONG_SIZE,A12 ;POP THE ARGUMENTS
         00001c80     0030  
     380 00001c90     05a0          MOVE    @GMENULEV,A0            ;KICK LEVEL POINTER
         00001ca0 00000010- 
     381 00001cc0     1420          DEC     A0
     382 00001cd0     0580          MOVE    A0,@GMENULEV
         00001ce0 00000010- 
     383 00001d00                   RETP
     384                    
     385 00001d30           DIVE_TO_MONITOR:
     386 00001d30     05a0          MOVE    @GMENULEV,A0            ;CHECK LEVEL
         00001d40 00000010- 
     387 00001d60     0b40          CMPI    1,A0                    ;ARE WE AT LEVEL 1
         00001d70     fffe  
     388 00001d80     cb06          JRNZ    DTM1                    ;NOPE....SET "MONITOR" LEVEL
     389 00001d90     1828          MOVK    1,A8
     390 00001da0     09e9          MOVI    GO_DIAG,A9              ;ROUTINE FOR DIAGNOSTIC MENU
         00001db0 00000000! 
     391 00001dd0     182a          MOVK    1,A10                   ;RETURN AS IF ADVANCE WAS PRESSED
     392 00001de0     c0dd          JRUC    PHONEY_MENU_RET         ;WE'RE READY TO CALL DIAG MENU
     393 00001df0           DTM1:   
     394 00001df0     05a8          MOVE    @MAIN_RET,A8            ;FLAG IS OPPOSITE OF ENTRY NUMBER
         00001e00 00000000- 
     395 00001e20     03a8          NEG     A8                      ;THIS IS RETURN LEVEL!
     396 00001e30     810c          MOVE    A8,*A12                 ;PUT MENU NUMBER AS A WORD
     397 00001e40     c0af          JRUC    DIVE_COMPLETE           ;THIS COMPLETES THE DIVE!
     398                    
     399                    
     400 00001e50           MENU_TOP:
     401 00001e50     b702          MOVE    *A8(MR_TITLE),A2,L      ;GET TITLE INTO A2
         00001e60     0040  
     402 00001e70     b503          MOVE    *A8(MR_TCLR),A3         ;AND COLOR INTO A3
         00001e80     0060  
     403                    
     404 00001e90           TOP_BOX:
     405 00001e90     a30c          MOVE    A8,-*A12,L              ;PUSH MENU PTR
     406 00001ea0     0d3f          CALLR   SCR_BOX                 ;PUT UP THE TITLE BOX
         00001eb0     002c  
     407                    
     408 00001ec0     09e8          MOVI    MESS_TITLE,A8    ;SET PARAMETERS
         00001ed0 00009d60' 
     409 00001ef0     0d5f          CALLA   LM_SETUP         ;PUT IT OUT.
         00001f00 00000000! 
     410                    
     411 00001f20     4c48          MOVE    A2,A8            ;GET STRING IN THE CORRECT REGGIE
     412                    
     413 00001f30                   JSRP    LM_FINIS         ;AND PRINT IT!
     414                    
     415 00001fa0                   JSRP    SCR_REV          ;NOW ADD THE REV.
     416                    
     417 00002010     9788          MOVE    *A12+,A8,L       ;RESTORE THE MENU PTR
     418                    
     419 00002020                   RETP
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   10

     420                    
     421 00002050           SCR_REV:
     422 00002050     09e8          MOVI    MESS_REV,A8     ;GET READY FOR REV MESSAGE
         00002060 00009e00' 
     423 00002080     0d5f          CALLA   LM_SETUP        ;SETUP FOR REV MESSAGE
         00002090 00000000! 
     424                    
     425 000020b0     09e8          MOVI    ROM_NAME,A8     ;USE ROM COPY OF REV.
         000020c0 00000000! 
     426 000020e0                   JSRP    LM_FINIS        ;FINISH PRINTING MESSAGE
     427 00002150                   RETP
     428                    
     429 00002180           SCR_BOX:
     430 00002180     09e4          MOVI    TIT_ULX+(10000H*TIT_ULY),A4    ;UPPER LEFT
         00002190 00040005  
     431 000021b0     09e5          MOVI    TIT_LRX+(10000H*TIT_LRY),A5    ;UPPER LEFT
         000021c0 002a0185  
     432 000021e0     09c9          MOVI    COLOR_YELLOW,A9
         000021f0     0505  
     433 00002200     0d3f          CALLR   STD_BORD
         00002210     0608  
     434 00002220     0960          RETS
     435                    
     436                    
     437 00002230           RED_BOX:
     438 00002230     a30c          MOVE    A8,-*A12,L                       ;PUSH THE MENU PTR
     439                    
     440 00002240     09c9          MOVI    ROBO_RED,A9
         00002250     0303  
     441 00002260     0d3f          CALLR   COL_INST                ;THIS PRINTS BOX AND STASHES
         00002270     0018  
     442                    
     443 00002280     09e8          MOVI    MM_INST1,A8     ;POINT AT INSTRUCTIONS MESSAGE
         00002290 00009490' 
     444 000022b0                   JSRP    C_PD_M
     445                    
     446 00002320     09e8          MOVI    MM_INST2,A8     ;POINT AT INSTRUCTIONS MESSAGE
         00002330 000095e0' 
     447 00002350                   JSRP    C_PD_M
     448                    
     449 000023c0     9788          MOVE    *A12+,A8,L      ;GET BACK MENU PTR.
     450 000023d0                   RETP
     451                    
     452 00002400           COL_INST:
     453 00002400     0d3f          CALLR   STUFF_MENU_PROCESS               ;MOVE DATA INTO PDATA AREA
         00002410     0384  
     454 00002420     0d3f          CALLR   MEN_NUMS                         ;GET THE NUMBERS FOR THIS MENU
         00002430     000b  
     455 00002440     b0cd          MOVE    A6,*A13(PDATA),W                 ;STASH THE X CENTER
         00002450     0100  
     456 00002460     0b24          ADDI    10000H*INST_ULY,A4               ;UPPER LEFT Y
         00002470 002d0000  
     457 00002490     0b25          ADDI    10000H*INST_LRY,A5               ;UPPER LEFT X
         000024a0 004a0000  
     458 000024c0     0d3f          CALLR   STD_BORD
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   11

         000024d0     05dc  
     459 000024e0     0960          RETS
     460                    
     461 000024f0           MEN_NUMS:
     462 000024f0     0d3f          CALLR   MENU_UL_A4_A5                    ;LEFT X IN A4
         00002500     0542  
     463 00002510     0d3f          CALLR   MENU_LR_A6_A5                    ;RIGHT X IN A6
         00002520     0551  
     464 00002530     4cc5          MOVE    A6,A5                            ;COPY RIGHT X INTO A5
     465 00002540     4086          ADD     A4,A6                            ;FIND CENTER
     466 00002550     2fe6          SRL     1,A6                             ;A6 NOW HAS CENTER X (FOR LATER)
     467 00002560     0960          RETS
     468                    
     469 00002570           C_PD_M:
     470 00002570     0d5f          CALLA   LM_SETUP        ;SETUP THE MESSAGE
         00002580 00000000! 
     471 000025a0     b5a3          MOVE    *A13(PDATA),A3  ;GET THE X
         000025b0     0100  
     472 000025c0     ec69          movx    a3,a9           ;Move X
     473 000025d0     0161          JUMP    A1              ;AND "CALL" THE ROUTINE
     474                    
     475                    
     476 000025e0           DIGSRT
     477 000025e0     0d3f          CALLR   DIAG_STATE
         000025f0     0017  
     478 00002600     0d5f          CALLA   WIPEOUT         ;INITIALIZE THE OBJECT LIST
         00002610 00000000! 
     479 00002630     0d3f          CALLR   DIAG_COLORS     ;RESTART THE COLOR PROCESSES.
         00002640     0020  
     480 00002650     0d5f          CALLA   QSNDRST         ;kill any sounds in progress
         00002660 00000000! 
     481 00002680     0d5f          calla   dpageflip_off
         00002690 00000000! 
     482 000026b0     1820          MOVK    1,A0
     483 000026c0     0580          MOVE    A0,@DISPLAYON   ;WE NEED TO SEE THE STUFF
         000026d0 00000000! 
     484                    
     485 000026f0     09c0          movi    HEBLNKINIT,a0
         00002700     0032  
     486 00002710     0580          move    a0,@HEBLNK
         00002720 c0000010  
     487                    
     488 00002740     c080          jauc    CLR_SCRN        ;CLEAR THE SCREEN!
         00002750 00000000! 
     489                    
     490 00002770           DIAG_STATE
     491 00002770     5621          CLR     A1
     492 00002780     0d5f          CALLA   KILALL                  ;KILL ABSOLUTELY EVERYONE!
         00002790 00000000! 
     493                    
     494 000027b0     09c1          MOVI    DIAG_PID,A1             ;SET OUR ID TO DIAGNOSTICS MAN
         000027c0     0082  
     495 000027d0     b02d          MOVE    A1,*A13(PROCID)         ;PASS OUR ID TO FORKED PROCESS
         000027e0     0020  
     496                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   12

     497 000027f0     09c0          movi    INDIAG,a0
         00002800     ffff  
     498 00002810     0580          move    a0,@GAMSTATE            ;PUT US IN TEST MODE!
         00002820 00000000! 
     499 00002840     0960          rets
     500                    
     501                    
     502                    
     503              0004  NUM_DIAG_CYCLE_COLORS   .EQU    4
     504              003c  DIAG_CYCLE_COLOR_START  .EQU    03CH
     505                    
     506 000000e0                   .BSS    DIAG_CRAM,NUM_DIAG_CYCLE_COLORS*16,1    ;RAM FOR TRANSFER
     507                    
     508 00002850           DIAG_COLORS
     509 00002850     098f          MMTM    SP,A0,A1,A7
         00002860     c100  
     510 00002870     09c0          MOVI    COLRPID,A0
         00002880     0078  
     511 00002890     5621          CLR     A1
     512 000028a0     0581          MOVE    A1,@IRQSKYE
         000028b0 00000000! 
     513 000028d0     0781          move    a1,@PALFRAM,L
         000028e0 00000000! 
     514 00002900     0d5f          CALLA   KIL1C            ;KILL ALL COLOR UPDATE PROCESSES
         00002910 00000000! 
     515 00002930     09e0          MOVI    DIAGP,A0         ;CREATE DIAGNOSTICS PALLETTE
         00002940 00000000! 
     516 00002960     0d5f          CALLA   pal_getf
         00002970 00000000! 
     517 00002990     09c0          MOVI    COLRPID,A0
         000029a0     0078  
     518 000029b0     5621          CLR     A1
     519 000029c0     03e1          NOT     A1
     520 000029d0     0d5f          CALLA   KILALL
         000029e0 00000000! 
     521 00002a00                   CREATE  COLRPID,PC_TRANSFER
     522 00002a80                   CREATE  COLRPID,LFLASH
     523 00002b00                   CREATE  COLRPID,RGB
     524 00002b80                   CREATE  COLRPID,BPR
     525 00002c00                   CREATE  COLRPID,DECAY
     526 00002c80     09af          MMFM    SP,A0,A1,A7
         00002c90     0083  
     527 00002ca0     0960          RETS
     528                    
     529                    
     530 00002cb0     0d3f  RGB     CALLR   TABDRIVE
         00002cc0     008c  
     531 00002cd0 00002d20'         .LONG   RGBTAB,DIAG_CRAM+30H
     532 00002d10     0008          .WORD   8
     533 00002d20     7c00  RGBTAB  .WORD   07C00H,001FH,077A0H,0741AH,0FFFFH
     534                    
     535 00002d70     0d3f  DECAY   CALLR   TABDRIVE
         00002d80     0080  
     536 00002d90 00002de0'         .LONG   DCATAB,DIAG_CRAM+010H
     537 00002dd0     0002          .WORD   2
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   13

     538 00002de0     001c  DCATAB  .WORD   001CH,001CH,011CH,021CH,031CH,039CH,239CH,2390H,2388H
     539 00002e70     2380          .WORD   2380H,4300H,5280H,7180H,6180H,7080H,7000H,6000H,5000H
     540 00002f00     4000          .WORD   4000H,3000H,2000H,1000H,0FFFFH
     541 00002f50     0d3f  BPR     CALLR   TABDRIVE
         00002f60     0062  
     542 00002f70 00002fc0'         .LONG   BPRTAB,DIAG_CRAM
     543 00002fb0     0001          .WORD   1
     544 00002fc0     001c  BPRTAB  .WORD   001CH,101CH,201CH,301CH,401CH,501CH,601CH,701CH,7010H
     545 00003050     7010          .WORD   7010H,7008H,7008H,7000H,7000H,7008H,7008H,7010H,7010H
     546 000030e0     701c          .WORD   701CH,701CH,601CH,501CH,401CH,301CH,201CH,101CH,0FFFFH
     547                    
     548 00003170     09c0  LFLASH  MOVI    07FFFH,A0
         00003180     7fff  
     549 00003190     0580          MOVE    A0,@DIAG_CRAM+20H,W
         000031a0 00000100- 
     550 000031c0                   SLEEPK  2
     551 00003200           LFLASH1
     552 00003200     05a0          MOVE    @RAND,A0,W
         00003210 00000000! 
     553 00003230     0b80          ANDI    0000001FH,A0
         00003240 ffffffe0  
     554 00003260     09e1          MOVI    COLTAB,A1
         00003270 00003340' 
     555 00003290     2480          SLL     4,A0
     556 000032a0     4001          ADD     A0,A1
     557 000032b0     8421          MOVE    *A1,A1,W
     558 000032c0     0581          MOVE    A1,@DIAG_CRAM+020H,W
         000032d0 00000100- 
     559 000032f0                   SLEEPK  6
     560 00003330     c0e3          JRUC    LFLASH
     561                    
     562 00003340     0380  COLTAB  .WORD   0380H,1380H,2380H,3380H,4380H,5380H,6380H,7380H,7300H
     563 000033d0     7280          .WORD   7280H,7200H,7180H,7080H,7008H,7008H,7010H,7010H,701CH
     564 00003460     701c          .WORD   701CH,601CH,501CH,409CH,309CH,209CH,219CH,029CH,039CH
     565 000034f0     139c          .WORD   139CH,239CH,339CH,539CH,739CH,7390H,7380H,6380H,4380H
     566 00003580     ffff          .WORD   0FFFFH
     567                    
     568 00003590           TABDRIVE
     569 00003590     97e0          MOVE    *SP+,A0,L
     570 000035a0     960b          MOVE    *A0+,A11,L      ;A11 = TABLE START
     571 000035b0     9609          MOVE    *A0+,A9,L       ;A9 = LOCATION TO STUFF COLOR
     572 000035c0     840a          MOVE    *A0,A10,W       ;A10 = SLEEP TIME
     573 000035d0           TABDRV1
     574 000035d0     4d68          MOVE    A11,A8          ;RESET TO START OF TABLE
     575 000035e0           TABDRV2
     576 000035e0     9500          MOVE    *A8+,A0,W       ;GET A COLOR
     577 000035f0     cefd          JRN     TABDRV1         ;BR = END OF TABLE
     578 00003600     8009          MOVE    A0,*A9,W
     579 00003610     4d40          MOVE    A10,A0
     580 00003620     09e7          MOVI    TABDRV2,A7
         00003630 000035e0' 
     581 00003650     c080          JAUC    PRCLSP          ;LOOP SLEEP
         00003660 00000000! 
     582                    
     583 00003680           PC_TRANSFER
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   14

     584 00003680     09e0          MOVI    DIAG_CRAM,A0
         00003690 000000e0- 
     585 000036b0     09c1          MOVI    DIAG_CYCLE_COLOR_START,A1
         000036c0     003c  
     586 000036d0     09c2          MOVI    NUM_DIAG_CYCLE_COLORS,A2
         000036e0     0004  
     587 000036f0     0d5f          CALLA   pal_set
         00003700 00000000! 
     588 00003720                   SLOOP   1,PC_TRANSFER
     589                    
     590 00003790           CHK_CMOS
     591 00003790     0d3f          CALLR   DIGSRT      ;CLEAR OUT THE SCREEN...(MESSAGE WILL FOLLOW!)
         000037a0     fee3  
     592 000037b0     0d5f          CALLA   CMOS_VAL
         000037c0 00000000! 
     593 000037e0     cb13          JRNZ    FAC_TIME
     594 000037f0     09e2          MOVI    MESS_BITCHIN,A2          ;POINT AT DATA
         00003800 00009ce0' 
     595 00003820     09c3          MOVI    ROBO_WHITE,A3
         00003830     0202  
     596 00003840                   JSRP    TOP_BOX
     597 000038b0                   SLEEPK  18H
     598 000038f0                   RETP
     599 00003920           FAC_TIME:
     600 00003920                   JSRP    GET_FAC                   ;GET THE GAME TO FACTORY SETTINGS!
     601 00003990     0d5f          CALLA   CLR_SCRN                  ;PRESSED....BLANK THE SCREEN AND
         000039a0 00000000! 
     602                                                               ;HOLD TILL HE LETS GO.
     603 000039c0     c080          JAUC     WARMSET              ;CMOS IS OK....RETURN!
         000039d0 00000000! 
     604                    
     605 000039f0           GET_FAC
     606                    
     607 000039f0           FAC_LOOP
     608 000039f0     0d5f          CALLA   CLR_SCRN                ;CLEAR SCREEN IN ANTICIPATION OF MESSAGE
         00003a00 00000000! 
     609 00003a20     5600          clr     a0                      ;Full
     610 00003a30     0d5f          CALLA   FAC_SET
         00003a40 00000000! 
     611 00003a60     0d5f          CALLA   CMOS_VAL                ;IS IT OK NOW?
         00003a70 00000000! 
     612 00003a90     ca0b          JRZ     CMOS_FIXED              ;YEP....FINISH CLEANUP!
     613                    
     614 00003aa0     09e8          MOVI    MESS_FAIL,A8            ;POINT AT DATA
         00003ab0 000098b0' 
     615 00003ad0                   JSRP    L_MESS                  ;DISPLAY LARRY MESSAGE
     616                    
     617 00003b40     c00f          JRUC    WAIT_POINT              ;WE'RE DEAD..ADVANCE TAKES US TO TEST MODE!
     618                    
     619 00003b50           CMOS_FIXED
     620 00003b50     0d3f          CALLR   CENT_BOX                ;PUT A BOX AROUND IT
         00003b60     0588  
     621                    
     622 00003b70     09e8          MOVI    MESS_FAC,A8             ;POINT AT DATA
         00003b80 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   15

     623 00003ba0                   JSRP    L_MESS                  ;DISPLAY LARRY MESSAGE
     624                    
     625                    
     626 00003c10     0d5f          CALLA   FAC_STUF                ;DO REST OF FULL FACTORY STUFF!
         00003c20 00000000! 
     627                    
     628                    
     629 00003c40           WAIT_POINT
     630 00003c40                   RETP                            ;NOW LET CALLER TAKE OVER.
     631                    
     632                    
     633              0100  MEN_OFF   EQU     PDATA                ;WORD-OFFSET INTO MENU OF SELECTION
     634              0110  MEN_ROUT  EQU     MEN_OFF+WORD_SIZE    ;LONG-ROUTINE FOR SELECTION
     635              0130  MEN_ROM   EQU     MEN_ROUT+LONG_SIZE   ;LONG-POINTER TO ROM STRUCTURE
     636              0150  MEN_ULX   EQU     MEN_ROM+LONG_SIZE    ;WORD-LEFT X  (CENTER X WHEN CENTERING)
     637              0160  MEN_ULY   EQU     MEN_ULX+WORD_SIZE    ;WORD-TOP Y
     638              0170  MEN_DY    EQU     MEN_ULY+WORD_SIZE    ;WORD-Y UNITS PER ENTRY
     639              0180  MEN_COLR  EQU     MEN_DY+WORD_SIZE     ;WORD-COLOR FOR ENTRIES
     640              0190  MEN_BAR   EQU     MEN_COLR+WORD_SIZE   ;WORD-HEIGHT OF SELECTION BAR
     641              01a0  MEN_BDY   EQU     MEN_BAR+WORD_SIZE    ;WORD-DY FROM TOP OF TEXT TO TOP OF BAR.
     642              01b0  MEN_BDX   EQU     MEN_BDY+WORD_SIZE    ;WORD-DX FROM LEFT OF WORD TO LEFT OF BAR
     643              01c0  MEN_BWID  EQU     MEN_BDX+WORD_SIZE    ;WORD-WIDTH OF BAR
     644              01d0  MEN_SCOL  EQU     MEN_BWID+WORD_SIZE   ;WORD-COLOR OF SELECTED TEXT
     645              01e0  MEN_TPTR  EQU     MEN_SCOL+WORD_SIZE    ;LONG-POINTER TO BEGINNING OF TEXT ENTRIES.
     646              0200  MEN_ENTS  EQU     MEN_TPTR+LONG_SIZE   ;WORD-NUMBER OF ENTRIES IN MENU
     647              0210  MEN_CUR   EQU     MEN_ENTS+WORD_SIZE   ;WORD-CURRENT SELECTION (1ST IS 1)
     648              0220  MEN_WALK  EQU     MEN_CUR+WORD_SIZE    ;WORD-NUMBER OF ENTRY WE'RE ON AS WE WALK
     649              0230  MEN_STIK  EQU     MEN_WALK+WORD_SIZE   ;LONG-"STUCK" STATE OF SWITCHES
     650              0250  MEN_ACT   EQU     MEN_STIK+LONG_SIZE   ;LONG-SWITCH WE'RE ACTING ON. (BIT)
     651              0270  MEN_TYPO  EQU     MEN_ACT+LONG_SIZE    ;WORD-TYPOMATIC COUNTER
     652              0280  MEN_HITS  EQU     MEN_TYPO+WORD_SIZE   ;WORD-CONSECUTIVE TYPOMATIC HITS
     653              0290  MEN_ADV   EQU     MEN_HITS+WORD_SIZE   ;WORD-NON-ZERO IF ADVANCE WAS BUTTON USED
     654                    
     655              0009  WORD_ENTS    EQU    (MEN_TPTR-MEN_ULX)/WORD_SIZE   ;NUMBER OF WORD ENTRIES
     656                    
     657 00003c70           B_MENU: 
     658 00003c70     09e7          MOVI    BD_SLAVE,A7
         00003c80 00003f20' 
     659 00003ca0     c003          JRUC    GMJMP
     660                    
     661 00003cb0           GET_MENU:
     662 00003cb0     09e7          MOVI    GM_SLAVE,A7             ;THIS IS ROUTINE
         00003cc0 00003f40' 
     663 00003ce0           GMJMP:
     664 00003ce0     09c1          MOVI    MENU_PID,A1             ;THIS IS ID
         00003cf0     0ac1  
     665 00003d00     0d5f          CALLA   GETPRC                  ;CREATE IT
         00003d10 00000000! 
     666                    
     667 00003d30     4c0a          MOVE    A0,A10                  ;SAVE HIS POINTER
     668                    
     669 00003d40           GM1:    
     670 00003d40                   SLEEPK  2
     671                    
     672 00003d80     09c0          MOVI    MDUN_PID,A0
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   16

         00003d90     0ac2  
     673 00003da0     09e1          MOVI    0FFFFH,A1
         00003db0 0000ffff  
     674 00003dd0     0d5f          CALLA   EXISTP                  ;WAIT FOR ID TO CHANGE TO THIS!
         00003de0 00000000! 
     675                    
     676 00003e00     caf3          JRZ     GM1                     ;LOOP UNTIL IT EXISTS!
     677                    
     678 00003e10     b548          MOVE    *A10(MEN_OFF),A8        ;RETURN OFFSET OF SELECTION
         00003e20     0100  
     679 00003e30     b749          MOVE    *A10(MEN_ROUT),A9,L     ;AND ROUTINE THAT WAS SELECTED.
         00003e40     0110  
     680 00003e50     b54a          MOVE    *A10(MEN_ADV),A10       ;INDICATE WHETHER ADVANCE WAS USED
         00003e60     0290  
     681                    
     682 00003e70     09c0          MOVI    MDUN_PID,A0
         00003e80     0ac2  
     683 00003e90     09e1          MOVI    0FFFFH,A1
         00003ea0 0000ffff  
     684 00003ec0     0d5f          CALLA   KILALL                  ;KILL THE HANGING MENU GETTER!
         00003ed0 00000000! 
     685 00003ef0                   RETP                            ;AND RETURN
     686                    
     687                            
     688 00003f20           BD_SLAVE
     689 00003f20     0d3f          CALLR   MENU_BORDER          ;DRAW THE BORDER FOR SELCTIONS.
         00003f30     0382  
     690                    
     691 00003f40           GM_SLAVE
     692 00003f40                   JSRP    ST_STICK          ;TELL STICK(S) AND BUTTONS WE'RE STARTING.
     693                    
     694 00003fb0     0d3f          CALLR   STUFF_MENU_PROCESS   ;MOVE DATA INTO PDATA AREA
         00003fc0     01c9  
     695                    
     696                    
     697 00003fd0     1820          MOVK    1,A0                        ;SETUP FOR LINE 1.
     698                    
     699 00003fe0           DO_ANOTHER_LINE
     700                    
     701 00003fe0     b00d          MOVE    A0,*A13(MEN_WALK),W       ;WALK THROUGH.
         00003ff0     0220  
     702                    
     703 00004000                   JSRP    DO_MENU_LINE              ;PUT OUT LINE IN A0.
     704 00004070     b5a0          MOVE    *A13(MEN_WALK),A0,W       ;GET BACK THE COUNTER
         00004080     0220  
     705                    
     706 00004090     1020          INC     A0                        ;MOVE TO NEXT ENTRY.
     707 000040a0     b5a1          MOVE    *A13(MEN_ENTS),A1,W       ;SEE IF WE'RE DONE.
         000040b0     0200  
     708 000040c0     4820          CMP     A1,A0
     709 000040d0     c2f0          JRLS    DO_ANOTHER_LINE
     710 000040e0     0d3f          CALLR   PLOT_HELP                 ;PLOT HELP FOR 1ST IF NECESSARY
         000040f0     0349  
     711                    
     712                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   17

     713 00004100           MENU_LOOP
     714 00004100                   SLEEPK  1
     715 00004140     0d5f          calla   READ_DIP                ;Get the current dip switch bits
         00004150 00000000! 
     716 00004170     1f00          btst    DPTEST_B,a0
     717 00004180     0300          jrnz    bmridipon
     718                    
     719 00004190           bmridipon
     720 00004190     09e5          MOVI    MENU_TYPO,A5
         000041a0 0004000e  
     721 000041c0                   JSRP    GETSTICK                ;ASK THE STICK HANDLER.......
     722 00004230     4c00          MOVE    A0,A0                   ;SEE WHAT GET_STICK RETURNED.
     723 00004240     caeb          JRZ     MENU_LOOP               ;MENU...(PAUSE)  NOTHING.
     724                    
     725 00004250     b5a1          MOVE    *A13(MEN_CUR),A1,W      ;GET CURRENT ENTRY...IN A1
         00004260     0210  
     726                    
     727 00004270     0b40          CMPI    3,A0                    ;BUTTON?
         00004280     fffc  
     728 00004290     ca35          JRZ     MENU_BUTTON             ;YEP....WE'RE OUT OF HERE.
     729                    
     730 000042a0     0b40          CMPI    2,A0
         000042b0     fffd  
     731 000042c0     ca0e          JRZ     MENU_DOWN               ;ITS DOWN....
     732 000042d0     0b41          CMPI    1,A1                    ;WELL?
         000042e0     fffe  
     733 000042f0     c2e0          JRLS    MENU_LOOP               ;YEP....IGNORE
     734                    
     735 00004300                   JSRP    UN_SELECT               ;PUT BACK THE OLD "CURRENT ONE
     736 00004370     b5a0          MOVE    *A13(MEN_CUR),A0,W      ;GET CURRENT ENTRY
         00004380     0210  
     737 00004390     1420          DEC     A0                      ;MAKE ONE LESS.
     738 000043a0     c00e          JRUC    JOIN_DOWN               ;NOW PLOT THE NEW ONE.
     739                    
     740 000043b0           MENU_DOWN:
     741 000043b0     b5a2          MOVE    *A13(MEN_ENTS),A2,W     ;GET NUMBER IN MENU
         000043c0     0200  
     742 000043d0     4841          CMP     A2,A1                   ;ARE WE AT MAX
     743 000043e0     c9d1          JRHS    MENU_LOOP               ;YEP...NO ACTION
     744                    
     745 000043f0                   JSRP    UN_SELECT               ;PUT BACK THE OLD "CURRENT ONE
     746                    
     747 00004460     b5a0          MOVE    *A13(MEN_CUR),A0,W      ;GET CURRENT ENTRY
         00004470     0210  
     748 00004480     1020          INC     A0                      ;MAKE THIS THE NEXT.
     749                    
     750 00004490           JOIN_DOWN:
     751 00004490     b00d          MOVE    A0,*A13(MEN_CUR),W      ;PUT BACK
         000044a0     0210  
     752 000044b0                   JSRP    DO_MENU_LINE            ;PUT OUT LINE IN A0.
     753 00004520     0d3f          CALLR   PLOT_HELP               ;PLOT HELP NEW ONE
         00004530     0305  
     754 00004540                   SLEEPK  1                       ;DELAY BEEP 1 FRAME
     755 00004580                   SOUND1  beep1_snd
     756 000045e0     c0b1          JRUC    MENU_LOOP               ;AND WAIT FOR NEXT RESPONSE.
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   18

     757                    
     758 000045f0           MENU_BUTTON:
     759 000045f0     b7a0          MOVE    *A13(MEN_ROM),A0,L
         00004600     0130  
     760 00004610     0b60          CMPI    MEN_ADJ,A0              ; SPECIAL CASE FOR MENU ADJ
         00004620 ffffffff! 
     761 00004640     cb16          JRNZ    MBNOTADJ
     762 00004650     0d5f          CALLA   CKDIP
         00004660 00000000! 
     763 00004680     cb12          JRNZ    MBNOTADJ                ; NOT USING DIP SWITCHES
     764 00004690     b5a0          MOVE    *A13(MEN_CUR),A0,W      ; GET THE SELECT ITEM
         000046a0     0210  
     765 000046b0     0b40          CMPI    2,A0                    ; "STANDARD PRICING"
         000046c0     fffd  
     766 000046d0     ca06          JRZ     MBABORT
     767 000046e0     0b40          CMPI    3,A0                    ; "CUSTOM PRICING"
         000046f0     fffc  
     768 00004700     ca03          JRZ     MBABORT
     769 00004710     0b40          CMPI    4,A0                    ; "FREE PLAY"
         00004720     fffb  
     770 00004730     cb07          JRNZ    MBNOTADJ
     771 00004740           MBABORT
     772                    
     773 00004740                   SOUND1  UHOH
     774 000047a0     c095          JRUC    MENU_LOOP
     775 000047b0           MBNOTADJ
     776 000047b0     5600          CLR     A0                      ;NOT ADVANCE
     777                    
     778 000047c0           IS_ADV: 
     779 000047c0     b00d          MOVE    A0,*A13(MEN_ADV),W      ;NON ZERO IF IT WAS ADVANCE
         000047d0     0290  
     780                    
     781 000047e0                   JSRP    BUTTON_STALL            ;HIGHLIGHT SELECTION AND HANG ON BUTTON
     782                    
     783 00004850     b5a0          MOVE    *A13(MEN_CUR),A0,W      ;GET "CURRENT" ENTRY.
         00004860     0210  
     784 00004870     0d3f          CALLR   GET_MENU_DATA           ;A1=CURRENT_OFFSET  A2=TEXT  A3=ROUTINE
         00004880     02b7  
     785 00004890     b00d          MOVE    A0,*A13(MEN_OFF),W      ;STORE THE OFFSET (CHOICE NUM)
         000048a0     0100  
     786 000048b0     b26d          MOVE    A3,*A13(MEN_ROUT),L     ;AND THE ROUTINE POINTER
         000048c0     0110  
     787 000048d0     09c0          MOVI    MDUN_PID,A0
         000048e0     0ac2  
     788 000048f0     b00d          MOVE    A0,*A13(PROCID),W       ;CHANGE OUR ID.
         00004900     0020  
     789                    
     790 00004910           MENU_DONE:
     791 00004910                   SLEEPK  20
     792 00004950     c0fb          JRUC    MENU_DONE               ;NOW HANG TILL DISPATCHER SEES ID.
     793                    
     794 00004960           BUTTON_STALL:
     795 00004960     0782          MOVE    A2,@LAST_BUT,L       ;PUSH THE BUTTON STATE
         00004970 00000040- 
     796                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   19

     797 00004990     05a0          MOVE    @SCODE,A0,W          ;NO CASH FOR REPEAT SOUND CODES
         000049a0 00000000! 
     798 000049c0     05a1          MOVE    @DCODE,A1,W
         000049d0 00000000! 
     799 000049f0     5401          OR      A0,A1
     800 00004a00     cb2d          JRNZ    DONT_WAIT            ;ITS A SOUND REPEAT....DON'T HOLD EITHER!
     801                    
     802 00004a10                   SOUND1  SELECT_SND            ;MAKE SELECT SOUND
     803                    
     804 00004a70     b5a0          MOVE    *A13(MEN_CUR),A0,W   ;GET CURRENT SELECTION
         00004a80     0210  
     805 00004a90     09c1          MOVI    COLOR_YELLOW,A1
         00004aa0     0505  
     806 00004ab0     0d3f          CALLR   MENU_BAR             ;CHANGE THE BAR COLOR.
         00004ac0     0170  
     807                    
     808 00004ad0     0d3f          CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00004ae0     0291  
     809 00004af0     09c1          MOVI    ROBO_WHITE,A1            ;WHITE ON ORANGE DURING HOT MOMENT
         00004b00     0202  
     810 00004b10                   JSRP    MENU_TEXT                 ;AND WRITE INVERTED TEXT
     811                    
     812 00004b80     07a8          MOVE    @LAST_BUT,A8,L            ;GET BUTTON BACK
         00004b90 00000040- 
     813 00004bb0     09c9          MOVI    08H,A9                    ;MINIMUM TIME FOR BUTTON HIGHLITE
         00004bc0     0008  
     814                    
     815 00004bd0           WAIT_FOR_RELEASE:
     816                    
     817                    
     818 00004bd0                   SLEEPK  1
     819                            
     820 00004c10     4d29          MOVE    A9,A9                ;REDUCE FOR HELD TIME
     821 00004c20     ca01          JRZ     WAIT_1               ;ZEROED OUT ALREADY.
     822 00004c30     1429          DEC     A9
     823                    
     824 00004c40           WAIT_1:
     825 00004c40     0d3f          CALLR   FORM_SWS        ;WAIT FOR THIS ONE TO GO TO ZERO
         00004c50     0210  
     826 00004c60     5100          AND     A8,A0                ;IS OUR BUTTON STILL DOWN?
     827 00004c70     cbf5          JRNZ    WAIT_FOR_RELEASE
     828                    
     829 00004c80     1029          INC     A9                   ;MAKE SURE A9 HAS 1 OR MORE
     830 00004c90           WAIT_2:
     831 00004c90                   SLEEPK  1
     832 00004cd0     3ca9          DSJS    A9,WAIT_2
     833                    
     834 00004ce0           DONT_WAIT:
     835 00004ce0     b5a0          MOVE    *A13(MEN_CUR),A0,W   ;GET CURRENT SELECTION
         00004cf0     0210  
     836 00004d00     5621          CLR     A1                   ;ERASE BAR
     837 00004d10     0d3f          CALLR   MENU_BAR             ;CHANGE THE BAR COLOR.
         00004d20     014a  
     838                    
     839 00004d30     0d3f          CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   20

         00004d40     026b  
     840 00004d50     b5a1          MOVE    *A13(MEN_COLR),A1,W       ;RE-PLOT THE NORMAL TEXT
         00004d60     0180  
     841 00004d70                   JSRP    MENU_TEXT               
     842                    
     843 00004de0                   SLEEPK  2                    ;NOW GIVE SOME BOUNCE PROTECTION.
     844                    
     845 00004e20                   RETP
     846                    
     847 00004e50       4e          .STRING "NNBBAA  JJAAMM  --  CCOOPPYYRRIIGGHHTT  11999933  "
     848 00004fe0       4d          .STRING "MMIIDDWWAAYY  MMAANNUUFFAACCTTUURRIINNGG  CCOOMMPPAANNYY..  "
     849 000051c0       41          .STRING "AALLLL  RRIIGGHHTTSS  RREESSEERRVVEEDD..  "
     850 00005310       44          .STRING "DDEESSIIGGNNEEDD  BBYY::  MMAARRKK  TTUURRMMEELLLL  "
     851 000054b0       53          .STRING "SSHHAAWWNN  LLIIPPTTAAKK  TTOONNYY  GGOOSSKKIIEE  "
     852 00005640       4a          .STRING "JJOOHHNN  CCAARRLLTTOONN  SSAALL  DDIIVVIITTAA  "
     853 000057c0       4a          .STRING "JJOOHHNN  HHEEYY  AANNDD  JJAAMMIIEE  RRIIVVEETTTT..  "
     854 00005970       53          .STRING "SSPPEECCIIAALL  TTHHAANNKKSS  TTOO::  LLIINNDDAA  DDEEAALL  "
     855 00005b50       41          .STRING "AANNDD  GGEEOORRGGEE  PPEETTRROO.."
     856 00005c60                   .even
     857                    
     858 00005c60           STUFF_MENU_PROCESS:
     859 00005c60     098f          MMTM    SP,A0,A1,A2,A3,A8
         00005c70     f080  
     860 00005c80     4da0          MOVE    A13,A0               ;POINT IN PROCESS AREA
     861 00005c90     0b00          ADDI    MEN_ROM,A0           ;THIS IS WHERE 1ST TIDBIT GOES
         00005ca0     0130  
     862 00005cb0     9300          MOVE    A8,*A0+,L            ;STORE OUR BASE POINTER IN STRUCTURE
     863 00005cc0     0b08          ADDI    MR_WORDS,A8          ;MOVE TO WORD LIST
         00005cd0     0070  
     864                    
     865 00005ce0     09c2          MOVI    WORD_ENTS,A2         ;NOW THIS MANY MORE WORDS.
         00005cf0     0009  
     866                    
     867 00005d00           GMS1:   
     868 00005d00     9501          MOVE    *A8+,A1
     869 00005d10     9020          MOVE    A1,*A0+
     870 00005d20     3c62          DSJS    A2,GMS1
     871 00005d30     b30d          MOVE    A8,*A13(MEN_TPTR),L  ;STORE IN PROCESS AREA.
         00005d40     01e0  
     872 00005d50     5600          CLR     A0                        ;START AT bmri1.
     873 00005d60           HOW_MANY:
     874 00005d60     1020          INC     A0                        ;MOVE TO NEXT ENTRY.
     875 00005d70     0d3f          CALLR   GET_MENU_DATA             ;GET THE PARAMETERS FOR THIS ENTRY
         00005d80     0167  
     876 00005d90     4c42          MOVE    A2,A2                     ;AND SEE IF A2=0
     877 00005da0     cbfb          JRNZ    HOW_MANY                  ;ITS REAL.....PUT IT UP.
     878                    
     879 00005db0     1420          DEC     A0                        ;PREVIOUS LINE WAS THE LAST.
     880 00005dc0     b00d          MOVE    A0,*A13(MEN_ENTS),W       ;STUFF NUMBER IN MENU.
         00005dd0     0200  
     881                    
     882 00005de0     4d29          MOVE    A9,A9                     ;DID BOZO PASS ZERO AS CURRENT?
     883 00005df0     ca03          JRZ     USE_LAST
     884 00005e00     4809          CMP     A0,A9                     ;MAKE SURE ITS NOT TOO HIGH
     885 00005e10     c301          JRHI    USE_LAST                  ;A9 IS TOO HIGH
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   21

     886 00005e20     4d20          MOVE    A9,A0                     ;USE THE ONE PAST
     887                    
     888 00005e30           USE_LAST:
     889 00005e30     b00d          MOVE    A0,*A13(MEN_CUR),W   ;MAKE ENTRY "1" CURRENT.
         00005e40     0210  
     890 00005e50     09af          MMFM    SP,A0,A1,A2,A3,A8
         00005e60     010f  
     891 00005e70     0960          RETS
     892                    
     893 00005e80           DO_MENU_LINE:
     894 00005e80     0d3f          CALLR   GET_MENU_DATA             ;GET "CURRENT" IN A1
         00005e90     0156  
     895 00005ea0     4801          CMP     A0,A1                     ;IS IT "CURRENT" ENTRY?
     896 00005eb0     ca0c          JRZ     DO_CURRENT_ENT            ;YEP....DO INVERSE STUFF
     897 00005ec0     b5a1          MOVE    *A13(MEN_COLR),A1,W       ;USE THE NORMAL ENTRY COLOR
         00005ed0     0180  
     898 00005ee0                   JSRP    MENU_TEXT                 ;PUT UP THE "TEXT" PORTION.
     899 00005f50                   RETP                              ;AND RETURN
     900                    
     901 00005f80           DO_CURRENT_ENT: 
     902 00005f80     09c1          MOVI    ROBO_WHITE,A1            ;DO THE BAR IN WHITE (AT A0 HEIGHT)
         00005f90     0202  
     903 00005fa0     0d3f          CALLR   MENU_BAR                  ;PUT IT UP (A0 PRESERVED)
         00005fb0     0021  
     904                    
     905 00005fc0     0d3f          CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00005fd0     0142  
     906 00005fe0     b5a1          MOVE    *A13(MEN_SCOL),A1,W       ;GET "SELECTED" COLOR
         00005ff0     01d0  
     907 00006000                   JSRP    MENU_TEXT                 ;AND WRITE INVERTED TEXT
     908 00006070                   RETP                              ;THAT'S ALL FOLKS.
     909                    
     910 000060a0           UN_SELECT:
     911 000060a0     b5a0          MOVE    *A13(MEN_CUR),A0,W        ;POINT AT CURRENT ENTRY
         000060b0     0210  
     912 000060c0     5621          CLR     A1                        ;USE BLACK FOR BACKGROUND
     913 000060d0     0d3f          CALLR   MENU_BAR                  ;THIS REMOVES THE BAR.
         000060e0     000e  
     914                    
     915 000060f0     0d3f          CALLR   GET_MENU_DATA             ;NOW GET A2 TO TEXT POINTER
         00006100     012f  
     916 00006110     b5a1          MOVE    *A13(MEN_COLR),A1,W       ;USE THE NORMAL ENTRY COLOR
         00006120     0180  
     917 00006130                   JSRP    MENU_TEXT                 ;PUT UP THE "TEXT" PORTION.
     918 000061a0                   RETP                              ;AND RETURN
     919                    
     920 000061d0           MENU_BAR:
     921 000061d0     098f          MMTM    SP,A0,A1,A3,A4,A5,A6,A7,A8    ;SAVE THE OFFSET
         000061e0     df80  
     922 000061f0     098f          MMTM    SP,A1                     ;SAVE COLOR!
         00006200     4000  
     923 00006210     0d3f          CALLR   GET_MENU_DATA             ;GET THE TEXT POINTER
         00006220     011d  
     924 00006230     0d3f          CALLR   STLEN_SETUP               ;SETUP FOR STRLEN CALL.
         00006240     003d  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   22

     925 00006250     0d5f          CALLA   STRNGLEN                  ;FIND WIDTH OF STRING.
         00006260 00000000! 
     926 00006280     b5a3          MOVE    *A13(MEN_ULX),A3,W        ;LEFT X IN A3                 
         00006290     0150  
     927 000062a0     b7a6          MOVE    *A13(MEN_ROM),A6,L        ;GET ROM POINTER
         000062b0     0130  
     928 000062c0     b6c6          MOVE    *A6(MR_TCAL),A6,L         ;CHECK ROUTINE
         000062d0     0020  
     929 000062e0     0b66          CMPI    STRCNRM,A6
         000062f0 ffffffff! 
     930 00006310     cb06          JRNZ    NOT_CENTERING
     931 00006320     b5a7          MOVE    *A13(MEN_BWID),A7,W       ;A7 IS THE REGISTER FOR BAR WIDTH
         00006330     01c0  
     932 00006340     4ce4          MOVE    A7,A4                     ;GET COPY IN A4
     933 00006350     2fe4          SRL     1,A4                      ;1/2 OF WIDTH COMES OFF OF CENTER
     934 00006360     4483          SUB     A4,A3                     ;A3 NOW HAS "LEFT X"
     935 00006370     c005          JRUC    CENTERING                 ;A7 IS WIDTH...A3 IS X
     936                    
     937 00006380           NOT_CENTERING:
     938 00006380     b5a4          MOVE    *A13(MEN_BDX),A4,W        ;GET EXTRA X UNITS FOR BAR
         00006390     01b0  
     939 000063a0     4483          SUB     A4,A3
     940                    
     941 000063b0     2424          SLL     1,A4                      ;NOW DOUBLE THE EXCESS DX FOR BAR
     942 000063c0     4087          ADD     A4,A7                     ;NOW A7 HAS WIDTH OF BAR
     943                    
     944 000063d0           CENTERING:
     945 000063d0     0be3          SUBI    C_KLUDGE,A3          ;KLUDGE TO NULLIFY FINAL SPACE.
         000063e0     fffe  
     946                    
     947 000063f0     0d3f          CALLR   GET_ENTRY_Y               ;GET Y FOR ENTRY IN A5
         00006400     0129  
     948                    
     949 00006410     b5a6          MOVE    *A13(MEN_BDY),A6,W        ;GET BAR DY (NEGATIVE)
         00006420     01a0  
     950 00006430     40c5          ADD     A6,A5                     ;ADJUST Y BY BAR DY
     951 00006440     2605          SLL     16,A5                     ;SHIFT Y INTO POSITION
     952                    
     953 00006450     40a3          ADD     A5,A3                     ;A3 NOW POINTS AT UPPER LEFT
     954                    
     955 00006460     b5a4          MOVE    *A13(MEN_BAR),A4,W        ;Y HEIGHT OF BAR
         00006470     0190  
     956 00006480     2604          SLL     16,A4                     ;IN POSITION
     957 00006490     40e4          ADD     A7,A4                     ;A7 HAS X WIDTH OF BAR.
     958                    
     959 000064a0     09af          MMFM    SP,A1                     ;NOW GET COLOR BACK!
         000064b0     0002  
     960 000064c0     2601          SLL     16,A1                     ;SHIFT COLOR TO HIGH HALF (PAL. 0)
     961 000064d0     0d5f          CALLA   FILLAREA                  ;FILL IT UP!
         000064e0 00000000! 
     962                    
     963 00006500     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7,A8    ;SAVE THE OFFSET
         00006510     01fb  
     964 00006520     0960          RETS
     965                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   23

     966 00006530           MENU_TEXT:
     967 00006530     0d3f          CALLR   GET_ENTRY_Y               ;GET Y FOR ENTRY IN A5
         00006540     0115  
     968 00006550     2605          SLL     16,A5                     ;SHIFT Y INTO POSITION
     969 00006560     b5a9          MOVE    *A13(MEN_ULX),A9,W        ;GET THE X
         00006570     0150  
     970 00006580     40a9          ADD     A5,A9                     ;A9 SET WITH SCREEN ADDRESS
     971                    
     972 00006590     4c26          MOVE    A1,A6                     ;COLOR
     973 000065a0     5600          CLR     A0                        ;NO SLEEP
     974                    
     975 000065b0     0d3f          CALLR   STLEN_SETUP
         000065c0     0005  
     976                    
     977 000065d0     b7a1          MOVE    *A13(MEN_ROM),A1,L
         000065e0     0130  
     978 000065f0     b621          MOVE    *A1(MR_TCAL),A1,L         ;GET THE ROUTINE TO USE
         00006600     0020  
     979 00006610     0161          JUMP    A1                        ;AND CALL IT!
     980                    
     981 00006620           STLEN_SETUP:
     982 00006620     4c48          MOVE    A2,A8                     ;TEXT POINTER
     983 00006630     09ca          MOVI    SPACING20,A10             ;SPACING
         00006640     0002  
     984 00006650     b7ab          MOVE    *A13(MEN_ROM),A11,L
         00006660     0130  
     985 00006670     b76b          MOVE    *A11(MR_FONT),A11,L       ;LOAD FONT
         00006680     0000  
     986 00006690     0960          RETS
     987                    
     988 000066a0           ST_STICK:
     989 000066a0     0d3f          CALLR   FORM_SWS           ;THIS LATCHES ANYONE ALREADY DOWN.
         000066b0     006a  
     990 000066c0     5600          CLR     A0
     991 000066d0     b20d          MOVE    A0,*A13(MEN_ACT),L      ;SHOW THAT WE'RE "ACTING" ON NONE.
         000066e0     0250  
     992 000066f0     b00d          MOVE    A0,*A13(MEN_TYPO),W     ;CLEAR TYPOMATIC COUNTER.
         00006700     0270  
     993 00006710     b00d          MOVE    A0,*A13(MEN_HITS),W     ;CLEAR OUT "CONSECUTIVE HITS"
         00006720     0280  
     994 00006730                   RETP
     995              0303  UP_OR_DOWN       EQU     UP_BITS+DOWN_BITS
     996              0004  TYPO_COUNT       EQU     4
     997              0019  TYPO_STALL       EQU     25
     998          0004000e  MENU_TYPO        EQU     (TYPO_COUNT*10000H)+14      ;14 HITS FOR MENU TILL STUCK
     999                            
    1000 00006760           GETSTICK:
    1001 00006760     4ca6          MOVE    A5,A6
    1002 00006770     2e05          SRL     16,A5                ;TYPO RATE IN A5
    1003 00006780     0b86          ANDI    WORD_MASK,A6         ;STUCK HIT COUNT IN A6
         00006790 ffff0000  
    1004                    
    1005 000067b0     0d3f          CALLR   FORM_SWS        ;SEE WHAT THEY LOOK LIKE NOW.
         000067c0     0059  
    1006 000067d0     03e1          NOT     A1                   ;LAST = 0 AND NOW = 1 MEANS EDGE!
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   24

    1007                    
    1008 000067e0     5020          AND     A1,A0                ;1'S WHERE WE HAVE POSITIVE EDGE.
    1009 000067f0     4c04          MOVE    A0,A4                ;KEEP NEW EDGE STATE IN A4!
    1010                    
    1011 00006800     0b80          ANDI    BUTTONS|START_BITS,A0        ;BUTTON SAYS ACT....IGNORE STICK!
         00006810 f9db0f0f  
    1012 00006830     cb3c          JRNZ    TEST_BUTS            ;NEW BUTTON......RETURN IT!
    1013 00006840     b7a2          MOVE    *A13(MEN_ACT),A2,L   ;IS THERE ONE TO WATCH?
         00006850     0250  
    1014 00006860     ca28          JRZ     NEW_SCAN             ;NOPE....LOOK FOR NEW STUFF!
    1015 00006870     0d3f          CALLR   FORM_SWS        ;SEE WHAT THEY LOOK LIKE NOW.
         00006880     004d  
    1016 00006890     5040          AND     A2,A0                ;IS IT STILL MADE?
    1017 000068a0     ca1f          JRZ     GS_STICK_OPEN        ;NOPE.......CLEAR OUT ITS STATE.
    1018 000068b0     b5a1          MOVE    *A13(MEN_TYPO),A1,W  ;DECREMENT TYPOMATIC COUNTER
         000068c0     0270  
    1019 000068d0     1421          DEC     A1
    1020 000068e0     b02d          MOVE    A1,*A13(MEN_TYPO),W  ;AND PUT BACK IN MEMORY
         000068f0     0270  
    1021 00006900     cb35          JRNZ    GS_ZERO              ;NOT TIME YET.....RETURN NOTHING
    1022 00006910     b5a1          MOVE    *A13(MEN_HITS),A1,W  ;GET NUMBER OF HITS
         00006920     0280  
    1023 00006930     1021          INC     A1                   ;AFTER 15 TYPOS.....KILL TILL OPEN!
    1024 00006940     b02d          MOVE    A1,*A13(MEN_HITS)    ;
         00006950     0280  
    1025 00006960     48c1          CMP     A6,A1                ;TOO MANY HITS?
    1026 00006970     c90e          JRHS    GS_GONE              ;YEP....CALL THIS "STUCK"
    1027 00006980     b0ad          MOVE    A5,*A13(MEN_TYPO),W  ;TYPOMATIC COUNTER RELOADED.
         00006990     0270  
    1028                    
    1029 000069a0           RETURN_UP_DOWN:
    1030 000069a0     4c01          MOVE    A0,A1                ;GET THE BIT
    1031 000069b0     4c22          MOVE    A1,A2                ;MAKE A COPY
    1032 000069c0     1820          MOVK    1,A0                 ;ASSUME UP
    1033 000069d0     0b81          ANDI    UP_BITS,A1           ;IS IT AN "UP" BIT
         000069e0 fffffefe  
    1034 00006a00     cb26          JRNZ    GS_X                 ;YEP...RETURN UP.
    1035 00006a10     1840          MOVK    2,A0                 ;ASSUME DOWN
    1036 00006a20     0b82          ANDI    DOWN_BITS,A2         ;IS IT A "DOWN" BIT
         00006a30 fffffdfd  
    1037 00006a50     cb21          JRNZ    GS_X                 ;YEP...RETURN "DOWN"
    1038                    
    1039 00006a60           GS_GONE:
    1040 00006a60     5600          CLR     A0                   ;CLEAR OUT CURRENT HIT.
    1041 00006a70     b20d          MOVE    A0,*A13(MEN_ACT),L   ;INDICATE READY FOR NEXT HIT!
         00006a80     0250  
    1042 00006a90     c01d          JRUC    GS_X                 ;AND RETURN THIS ZERO (NOTHING!)
    1043 00006aa0           GS_STICK_OPEN:
    1044 00006aa0                   SLEEPK  6
    1045 00006ae0     c0f7          JRUC    GS_GONE              ;NOW.....CLEAR OUT FOR NEXT HIT.
    1046 00006af0           NEW_SCAN:
    1047 00006af0     4c80          MOVE    A4,A0                ;LOOK AT THE NEW EDGES.
    1048                    
    1049 00006b00     0b80          ANDI    UP_OR_DOWN,A0        ;IS IT UP OR DOWN?
         00006b10 fffffcfc  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   25

    1050 00006b30     ca12          JRZ     GS_ZERO              ;NO STICK....RETURN NO ACTION!
    1051                    
    1052 00006b40     0d3f          CALLR   FRST_BIT             ;REDUCE TO ONE BIT.
         00006b50     0014  
    1053 00006b60     b20d          MOVE    A0,*A13(MEN_ACT),L   ;STORE THIS BIT
         00006b70     0250  
    1054                    
    1055 00006b80     09c1          MOVI    TYPO_STALL,A1
         00006b90     0019  
    1056 00006ba0     b02d          MOVE    A1,*A13(MEN_TYPO),W  ;TYPOMATIC COUNTER SET FOR LONG STALL.
         00006bb0     0270  
    1057                    
    1058 00006bc0     5621          CLR     A1
    1059 00006bd0     b02d          MOVE    A1,*A13(MEN_HITS),W  ;LOAD UP A BUNCH OF HITS
         00006be0     0280  
    1060 00006bf0     c0da          JRUC    RETURN_UP_DOWN       ;RETURN CORRECT CODE UP OR DOWN
    1061 00006c00           TEST_BUTS:
    1062 00006c00     0d3f          CALLR   FRST_BIT             ;USE 1 OF THEM.
         00006c10     0008  
    1063                    
    1064 00006c20     4c02          MOVE    A0,A2                ;RETURN THE BIT.
    1065                    
    1066 00006c30     09c0          MOVI    3,A0                 ;RETURN THAT ITS A BUTTON.
         00006c40     0003  
    1067 00006c50     c001          JRUC    GS_X                 ;STUCK PROCESSING WILL BE AUTOMATIC.
    1068                    
    1069 00006c60           GS_ZERO:
    1070 00006c60     5600          CLR     A0                   ;RETURN NO SWITCH.
    1071 00006c70           GS_X:   
    1072 00006c70                   RETP
    1073                    
    1074 00006ca0           FRST_BIT:
    1075 00006ca0     098f          MMTM    SP,A1,A2
         00006cb0     6000  
    1076 00006cc0     1821          MOVK    1,A1            ;SHIFT TILL WE FIND IT.
    1077 00006cd0           FB1:    
    1078 00006cd0     4c02          MOVE    A0,A2
    1079 00006ce0     5022          AND     A1,A2
    1080 00006cf0     cb02          JRNZ    GOT_IT          ;WE HAVE ON (IN A1)
    1081 00006d00     2421          SLL     1,A1            ;SHIFT IT
    1082 00006d10     c0fb          JRUC    FB1
    1083 00006d20           GOT_IT: 
    1084 00006d20     4c20          MOVE    A1,A0           ;RETURN THE BIT
    1085 00006d30     09af          MMFM    SP,A1,A2
         00006d40     0006  
    1086 00006d50     0960          RETS
    1087                    
    1088 00006d60           FORM_SWS:
    1089 00006d60     0d3f          callr   fudge_switches
         00006d70     0005  
    1090                    
    1091 00006d80     b7a1          move    *a13(MEN_STIK),a1,L     ;RETURN PREVIOUS STATE
         00006d90     0230  
    1092 00006da0     b20d          move    a0,*a13(MEN_STIK),L     ;SAVE "STUCK" STATE.
         00006db0     0230  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   26

    1093 00006dc0     0960          rets
    1094                    
    1095 00006dd0           fudge_switches
    1096                    
    1097 00006dd0     07a0          move    @SWITCH,a0,L            ;GET BOTH SWITCH WORDS
         00006de0 01600000  
    1098 00006e00     03e0          not     a0                      ;COMPLEMENT
    1099                    
    1100 00006e10     05a1          move    @TWOPLAYERS,a1          ;0 = NO, 1 = YES 2 players
         00006e20 00000000! 
    1101 00006e40     cb20          jrnz    bmri2_plyrs
    1102                    
    1103 00006e50     05a1          move    @SWITCH+20h,a1          ;move P3UP & P3DOWN into low 32 bits
         00006e60 01600020  
    1104 00006e80     03e1          not     a1
    1105 00006e90     0b81          andi    011b,a1
         00006ea0 fffffffc  
    1106 00006ec0     5420          or      a1,a0
    1107                    
    1108 00006ed0     05a1          move    @SWITCH+28h,a1          ;move P4UP & P4DOWN into low 32 bits
         00006ee0 01600028  
    1109 00006f00     03e1          not     a1
    1110 00006f10     0b81          andi    011b,a1
         00006f20 fffffffc  
    1111 00006f40     5420          or      a1,a0
    1112                    
    1113 00006f50     05a1          move    @SWITCH+20h,a1          ;move P3 ACTION buttons into low 32 bits
         00006f60 01600020  
    1114 00006f80     03e1          not     a1
    1115 00006f90     0b81          andi    01110000b,a1
         00006fa0 ffffff8f  
    1116 00006fc0     5420          or      a1,a0
    1117                    
    1118 00006fd0     05a1          move    @SWITCH+28h,a1          ;move P4 ACTION buttons into low 32 bits
         00006fe0 01600028  
    1119 00007000     03e1          not     a1
    1120 00007010     0b81          andi    01110000b,a1
         00007020 ffffff8f  
    1121 00007040     5420          or      a1,a0
    1122                    
    1123 00007050           bmri2_plyrs
    1124 00007050     0960          rets
    1125                    
    1126                    
    1127 00007060           fudge_switches_diag
    1128                    
    1129 00007060     07a0          move    @SWITCH,a0,L            ;GET BOTH SWITCH WORDS
         00007070 01600000  
    1130 00007090     03e0          not     a0                      ;COMPLEMENT
    1131                    
    1132 000070a0     05a1          move    @TWOPLAYERS,a1          ;0 = NO, 1 = YES 2 players
         000070b0 00000000! 
    1133 000070d0     cb20          jrnz    bmri2_plyrs2
    1134                    
    1135 000070e0     05a1          move    @SWITCH+20h,a1          ;move P3UP & P3DOWN into low 32 bits
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   27

         000070f0 01600020  
    1136 00007110     03e1          not     a1
    1137 00007120     0b81          andi    011b,a1
         00007130 fffffffc  
    1138 00007150     5420          or      a1,a0
    1139                    
    1140 00007160     05a1          move    @SWITCH+28h,a1          ;move P4UP & P4DOWN into low 32 bits
         00007170 01600028  
    1141 00007190     03e1          not     a1
    1142 000071a0     0b81          andi    011b,a1
         000071b0 fffffffc  
    1143 000071d0     5420          or      a1,a0
    1144                    
    1145 000071e0     05a1          move    @SWITCH+20h,a1          ;move P3 ACTION buttons into low 32 bits
         000071f0 01600020  
    1146 00007210     03e1          not     a1
    1147 00007220     0b81          andi    01110000b,a1
         00007230 ffffff8f  
    1148 00007250     5420          or      a1,a0
    1149                    
    1150 00007260     05a1          move    @SWITCH+28h,a1          ;move P4 ACTION buttons into low 32 bits
         00007270 01600028  
    1151 00007290     03e1          not     a1
    1152 000072a0     0b81          andi    01110000b,a1
         000072b0 ffffff8f  
    1153 000072d0     5420          or      a1,a0
    1154                    
    1155 000072e0           bmri2_plyrs2
    1156 000072e0                   FRET    B6
    1157                    
    1158 000072f0           fudge_switches2
    1159                    
    1160 000072f0     0d3f          callr   fudge_switches
         00007300     ffac  
    1161 00007310     07a1          move    @fswitches_cur,a1,L
         00007320 00000080- 
    1162 00007340     0781          move    a1,@fswitches_last,L
         00007350 000000a0- 
    1163 00007370     0780          move    a0,@fswitches_cur,L
         00007380 00000080- 
    1164 000073a0     5601          xor     a0,a1                   ;bits that have changed
    1165 000073b0     5001          and     a0,a1                   ;down transitions only
    1166 000073c0     0781          move    a1,@fswitches_down,L
         000073d0 000000c0- 
    1167                    
    1168 000073f0     0960          rets
    1169                    
    1170 00007400           GET_MENU_DATA:
    1171 00007400     098f          MMTM    SP,A0                ;DON'T ALTER A0
         00007410     8000  
    1172                    
    1173 00007420     0d3f          CALLR   PM_ENTRY     ;POINT A1 AT ENTRY
         00007430     0009  
    1174                    
    1175 00007440     b622          MOVE    *A1(MENU_TEXT_PTR),A2,L   ;FETCH THE TEXT POINTER
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   28

         00007450     0000  
    1176 00007460     b623          MOVE    *A1(MENU_ROUTINE),A3,L    ;FETCH THE ROUTINE
         00007470     0020  
    1177 00007480     b5a1          MOVE    *A13(MEN_CUR),A1,W        ;RETURN CURRENT ENTRY IN A1
         00007490     0210  
    1178 000074a0     09af          MMFM    SP,A0                ;DON'T ALTER A0
         000074b0     0001  
    1179 000074c0     0960          RETS
    1180                    
    1181 000074d0           PM_ENTRY:
    1182 000074d0     098f          MMTM    SP,A0
         000074e0     8000  
    1183 000074f0     1420          DEC     A0                   ;INDEX FROM ZERO
    1184 00007500     09c1          MOVI    MENU_ENTRY_SIZE,A1   ;TIMES SIZE PER ENTRY
         00007510     0060  
    1185 00007520     5e01          MPYU    A0,A1                ;A1 CONTAINS OFFSET INTO TABLE
    1186                    
    1187 00007530     b7a0          MOVE    *A13(MEN_TPTR),A0,L  ;GET THE BASE OF THE MENU TEXT ENTRIES
         00007540     01e0  
    1188 00007550     4001          ADD     A0,A1                ;ADD TO OFFSET
    1189 00007560     09af          MMFM    SP,A0
         00007570     0001  
    1190 00007580     0960          RETS
    1191                    
    1192 00007590           PLOT_HELP:
    1193 00007590     b5a0          MOVE    *A13(MEN_CUR),A0,W        ;GET CURRENT ENTRY
         000075a0     0210  
    1194 000075b0     0d3f          CALLR   PM_ENTRY          ;A1 POINTS AT GROUP
         000075c0     fff0  
    1195 000075d0     b628          MOVE    *A1(MENU_HELP),A8,L       ;GET HELP TABLE
         000075e0     0040  
    1196 000075f0     0b48          CMPI    NO_HELP,A8                ;NOT A "HELP" SITUATION?
         00007600     fffe  
    1197 00007610     ca07          JRZ     NO_HELP_FOR_THIS_ONE
    1198 00007620     0b48          CMPI    ADJ_HELP,A8               ;ADJUSTMENT HELP REQUESTED?
         00007630     fffd  
    1199 00007640     ca80          JAEQ    DO_ADJH                   ;THEN DO IT IN ADJ MODULE!
         00007650 00000000! 
    1200 00007670     0d3f          CALLR   DO_HELP_MENU
         00007680     00cc  
    1201 00007690           NO_HELP_FOR_THIS_ONE:
    1202 00007690     0960           RETS
    1203                    
    1204 000076a0           GET_ENTRY_Y:
    1205 000076a0     098f          MMTM    SP,A0,A1
         000076b0     c000  
    1206 000076c0     b5a5          MOVE    *A13(MEN_ULY),A5,W
         000076d0     0160  
    1207 000076e0     b5a1          MOVE    *A13(MEN_DY),A1,W
         000076f0     0170  
    1208 00007700     1420          DEC     A0
    1209 00007710     5e01          MPYU    A0,A1                ;A1 HAS OFFSET PER ENTRY
    1210 00007720     4025          ADD     A1,A5
    1211 00007730     09af          MMFM    SP,A0,A1
         00007740     0003  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   29

    1212 00007750     0960          RETS
    1213                    
    1214 00007760           MENU_BORDER:
    1215 00007760     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00007770     ffc0  
    1216 00007780     0d3f          CALLR   STUFF_MENU_PROCESS   ;MOVE DATA INTO PDATA AREA
         00007790     fe4c  
    1217 000077a0     0d3f          CALLR   MENU_UL_A4_A5             ;GET UPPER LEFT COORDINATES
         000077b0     0017  
    1218 000077c0     2605          SLL     16,A5
    1219 000077d0     40a4          ADD     A5,A4                     ;A4 POINTS TO UPPER LEFT.
    1220 000077e0     0d3f          CALLR   MENU_LR_A6_A5
         000077f0     0024  
    1221 00007800     2605          SLL     16,A5                     ;SHIFT A5 DOWN
    1222 00007810     40c5          ADD     A6,A5                     ;A5 POINTS AT LOWER RIGHT
    1223                    
    1224 00007820     b5a9          MOVE    *A13(MEN_COLR),A9,W       ;GET MENU TEXT COLOR
         00007830     0180  
    1225 00007840     0d3f          CALLR   STD_BORD
         00007850     00a4  
    1226                    
    1227 00007860     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00007870     03ff  
    1228 00007880     0960          RETS
    1229                    
    1230 00007890           MCSETUP:
    1231 00007890     b5a0          MOVE    *A13(MEN_ULX),A0,W        ;UPPER LEFT X (ACTUALLY CENTER)
         000078a0     0150  
    1232 000078b0     b5a1          MOVE    *A13(MEN_BWID),A1,W       ;BAR_WIDTH
         000078c0     01c0  
    1233 000078d0     2fe1          SRL     1,A1                      ;ALL CALCS USE BAR_WIDTH/2
    1234 000078e0     b5a2          MOVE    *A13(MEN_ULY),A2,W        ;UPPER LEFT Y
         000078f0     0160  
    1235 00007900     b5a3          MOVE    *A13(MEN_BDY),A3,W        ;DELTA Y (NEGATIVE)
         00007910     01a0  
    1236 00007920     0960          RETS
    1237                    
    1238                    
    1239 00007930           MENU_UL_A4_A5:
    1240 00007930     098f          MMTM    SP,A0,A1,A2,A3
         00007940     f000  
    1241 00007950     0d3f          CALLR   MCSETUP                   ;STUFF THE REGGIES
         00007960     fff2  
    1242 00007970     4c04          MOVE    A0,A4                     ;FORM ULX
    1243 00007980     4424          SUB     A1,A4
    1244 00007990     0be4          SUBI    C_KLUDGE,A4          ;A4 HAS UPPER LEFT X
         000079a0     fffe  
    1245                    
    1246 000079b0     4c45          MOVE    A2,A5
    1247 000079c0     4065          ADD     A3,A5                     ;A5 HAS UPPER LEFT Y
    1248                    
    1249 000079d0     0be4          SUBI    MB_XWID+GAP,A4            ;NOW WE POINT AT UPPER LEFT FOR FRAME
         000079e0     fffa  
    1250 000079f0     0be5          SUBI    MB_YWID+GAP,A5
         00007a00     fffa  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   30

    1251 00007a10     09af          MMFM    SP,A0,A1,A2,A3
         00007a20     000f  
    1252 00007a30     0960          RETS
    1253                    
    1254 00007a40           MENU_LR_A6_A5:
    1255 00007a40     098f          MMTM    SP,A0,A1,A2,A3
         00007a50     f000  
    1256 00007a60     0d3f          CALLR   MCSETUP                   ;STUFF THE REGGIES
         00007a70     ffe1  
    1257                    
    1258 00007a80     4c06          MOVE    A0,A6                     ;LOWER RIGHT X
    1259 00007a90     4026          ADD     A1,A6
    1260 00007aa0     0be6          SUBI    C_KLUDGE,A6          ;THIS IS THE X
         00007ab0     fffe  
    1261                    
    1262 00007ac0     b5a0          MOVE    *A13(MEN_ENTS),A0,W       ;THIS IS LAST ENTRY
         00007ad0     0200  
    1263 00007ae0     0d3f          CALLR   GET_ENTRY_Y               ;A5 HAS THE Y FOR THE LAST ENTRY
         00007af0     ffba  
    1264 00007b00     4065          ADD     A3,A5                     ;A5 NOW HAS TOP OF LAST BOX
    1265 00007b10     b5a7          MOVE    *A13(MEN_BAR),A7,W        ;HEIGHT OF BAR
         00007b20     0190  
    1266 00007b30     40e5          ADD     A7,A5                     ;A5 NOW HAS LOWER RIGHT Y
    1267                    
    1268 00007b40     0b05          ADDI    MB_YWID+GAP,A5
         00007b50     0005  
    1269 00007b60     0b06          ADDI    MB_XWID+GAP,A6            ;THIS IS END OF BORDER
         00007b70     0005  
    1270 00007b80     09af          MMFM    SP,A0,A1,A2,A3
         00007b90     000f  
    1271 00007ba0     0960          RETS
    1272                    
    1273                    
    1274 00007bb0           F_TITLE:
    1275 00007bb0     098f          MMTM    SP,A4,A5,A0
         00007bc0     8c00  
    1276 00007bd0     4c04          MOVE    A0,A4           ;COPY Y
    1277 00007be0     0be4          SUBI    12,A4
         00007bf0     fff3  
    1278 00007c00     2604          SLL     16,A4
    1279 00007c10     0b04          ADDI    TIT_ULX,A4      ;UPPER LEFT SET
         00007c20     0005  
    1280                    
    1281 00007c30     4c05          MOVE    A0,A5           ;LOWER RIGHT
    1282 00007c40     0b05          ADDI    27,A5
         00007c50     001b  
    1283 00007c60     2605          SLL     16,A5
    1284 00007c70     0b05          ADDI    TIT_LRX,A5      ;LOWER RIGHT SET
         00007c80     0185  
    1285                    
    1286 00007c90     0d3f          CALLR   STD_BORD
         00007ca0     005f  
    1287 00007cb0     09af          MMFM    SP,A4,A5,A0
         00007cc0     0031  
    1288 00007cd0     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   31

    1289                    
    1290              e0e0  FIRST_BORDER_COLOR       EQU     0E0E0H
    1291              efef  LAST_BORDER_COLOR        EQU     0EFEFH
    1292 00007ce0           G_BORDER:
    1293 00007ce0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6
         00007cf0     fe00  
    1294 00007d00     09e0          MOVI    10001H,A0                 ;1 BY 1 DIMENSION
         00007d10 00010001  
    1295                    
    1296 00007d30     09e9          MOVI    LAST_BORDER_COLOR,A9      ;USE LAST ONE 1ST
         00007d40 0000efef  
    1297 00007d60           NEXT_RING:
    1298 00007d60     0d3f          CALLR   DOBORDER                  ;DO THIS RING
         00007d70     0012  
    1299                    
    1300 00007d80     09e1          MOVI    10001H,A1                  ;THIS IS 1 UNIT IN X AND Y
         00007d90 00010001  
    1301 00007db0     e024          ADDXY   A1,A4
    1302 00007dc0     e225          SUBXY   A1,A5
    1303                    
    1304 00007dd0     0be9          SUBI    101H,A9
         00007de0     fefe  
    1305 00007df0     0b69          CMPI    FIRST_BORDER_COLOR,A9
         00007e00 ffff1f1f  
    1306 00007e20     c903          JRHS    COLOK
    1307 00007e30     09e9          MOVI    LAST_BORDER_COLOR,A9
         00007e40 0000efef  
    1308                    
    1309 00007e60           COLOK:  
    1310 00007e60     3e26          DSJS    A6,NEXT_RING
    1311 00007e70     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6
         00007e80     007f  
    1312 00007e90     0960          RETS
    1313                    
    1314 00007ea0           DOBORDER:
    1315 00007ea0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00007eb0     ffc0  
    1316 00007ec0     4d21          MOVE    A9,A1                     ;GET COLOR
    1317 00007ed0     2601          SLL     16,A1                     ;COLOR ON TOP..PALETTE 0
    1318 00007ee0     4c02          MOVE    A0,A2                     ;SEPARATE DELTA
    1319 00007ef0     0b80          ANDI    SX_MASK,A0
         00007f00 ffff0000  
    1320 00007f20     0b82          ANDI    SY_MASK,A2
         00007f30 0000ffff  
    1321                    
    1322 00007f50     4c86          MOVE    A4,A6                     ;UPPER LEFTS HERE
    1323 00007f60     4c87          MOVE    A4,A7
    1324                    
    1325 00007f70     4ca8          MOVE    A5,A8                     ;LOWER RIGHTS HERE
    1326 00007f80     4ca9          MOVE    A5,A9
    1327                    
    1328 00007f90     0b86          ANDI    SX_MASK,A6                 ;LEFT X
         00007fa0 ffff0000  
    1329 00007fc0     0b88          ANDI    SX_MASK,A8                 ;RIGHT X
         00007fd0 ffff0000  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   32

    1330                    
    1331 00007ff0     0b87          ANDI    SY_MASK,A7                 ;TOP Y
         00008000 0000ffff  
    1332 00008020     0b89          ANDI    SY_MASK,A9                 ;BOTTOM Y
         00008030 0000ffff  
    1333                    
    1334 00008050     4c83          MOVE    A4,A3
    1335                    
    1336 00008060     ed04          MOVX    A8,A4
    1337 00008070     eee4          MOVY    A7,A4
    1338 00008080     e044          ADDXY   A2,A4                     ;ADD THE DELTA
    1339                    
    1340 00008090     0d3f          CALLR   DO_A_LINE                 ;DO THIS LINE
         000080a0     0016  
    1341 000080b0     ed03          MOVX    A8,A3
    1342 000080c0     e203          SUBXY   A0,A3
    1343 000080d0     eee3          MOVY    A7,A3
    1344 000080e0     ed04          MOVX    A8,A4
    1345 000080f0     ef24          MOVY    A9,A4
    1346                    
    1347 00008100     0d3f          CALLR   DO_A_LINE
         00008110     000f  
    1348 00008120     ecc3          MOVX    A6,A3
    1349 00008130     ef23          MOVY    A9,A3
    1350 00008140     e243          SUBXY   A2,A3
    1351                    
    1352 00008150     0d3f          CALLR   DO_A_LINE
         00008160     000a  
    1353 00008170     ecc3          MOVX    A6,A3
    1354 00008180     eee3          MOVY    A7,A3
    1355                    
    1356 00008190     ecc4          MOVX    A6,A4
    1357 000081a0     e004          ADDXY   A0,A4
    1358 000081b0     ef24          MOVY    A9,A4
    1359                    
    1360 000081c0     0d3f          CALLR   DO_A_LINE
         000081d0     0003  
    1361                    
    1362 000081e0     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         000081f0     03ff  
    1363 00008200     0960          RETS
    1364                    
    1365 00008210           DO_A_LINE:
    1366 00008210     098f          MMTM    SP,A4
         00008220     0800  
    1367 00008230     e264          SUBXY   A3,A4           ;FORM DISTANCE
    1368 00008240     0d5f          CALLA   FILLAREA        ;AND DO THE FILL
         00008250 00000000! 
    1369 00008270     09af          MMFM    SP,A4
         00008280     0010  
    1370 00008290     0960          RETS
    1371                    
    1372 000082a0           STD_BORD:
    1373 000082a0     098f          MMTM    SP,A0
         000082b0     8000  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   33

    1374 000082c0     09e0          MOVI    BORDER_SIZE,A0
         000082d0 00030003  
    1375 000082f0     0d5f          CALLA   DOBORDER
         00008300 00007ea0' 
    1376 00008320     09af          MMFM    SP,A0
         00008330     0001  
    1377 00008340     0960          RETS
    1378 00008350           DO_HELP_MENU:
    1379 00008350     0d3f          CALLR   BLNKHELP
         00008360     0015  
    1380                    
    1381 00008370     4d08          MOVE    A8,A8                ;CHECK IF HELP MENU EXISTS.
    1382 00008380     ca12          JRZ     DHMX                 ;NOPE JUST CLEARING WAS OUR JOB.
    1383                    
    1384 00008390     b5a0          MOVE    *A13(MEN_CUR),A0,W   ;THIS IS CURRENT ENTRY
         000083a0     0210  
    1385 000083b0     4c0b          MOVE    A0,A11               ;PASS ENTRY NUMBER IN A11
    1386 000083c0     0d3f          CALLR   GET_ENTRY_Y          ;A5 HAS THE Y FOR THE CURRENT ENTRY
         000083d0     ff2c  
    1387 000083e0     b5aa          MOVE    *A13(MEN_BDY),A10,W  ;THIS IS NEGATIVE TO GIVE US BOX TOP
         000083f0     01a0  
    1388 00008400     40aa          ADD     A5,A10               ;NOW WE HAVE BOX TOP
    1389                    
    1390 00008410     b5a5          MOVE    *A13(MEN_BAR),A5,W   ;GET BAR HEIGHT
         00008420     0190  
    1391 00008430     2fe5          SRL     1,A5                 ;FIND CENTER OF BAR
    1392 00008440     40aa          ADD     A5,A10               ;NOW WE'RE AT BAR CENTER.
    1393                    
    1394 00008450     09e7          MOVI    H_SLAVE,A7        ;FORK OFF SO IT CAN USE PDATA!
         00008460 00008610' 
    1395 00008480     0d5f          CALLA   P_FORK               ;START UP ANOTHER W/ SAME ID TO FLASH!
         00008490 00000000! 
    1396 000084b0     0960  DHMX    RETS
    1397                    
    1398 000084c0           BLNKHELP:
    1399 000084c0     098f          MMTM    SP,A3,A4,A5,A6
         000084d0     1e00  
    1400 000084e0     0d3f          CALLR   MENU_LR_A6_A5        ;GET RIGHT X OF MAIN MENU IN A6
         000084f0     ff54  
    1401 00008500     4cc9          MOVE    A6,A9                ;PASS TO HELP MENU SLAVE
    1402 00008510     4cc3          MOVE    A6,A3                ;UPPER LEFT X OF REGION TO BLANK OUT
    1403 00008520     0b23          ADDI    INST_ULY*10000H,A3   ;THIS IS UPPER LEFT OF BLOCK
         00008530 002d0000  
    1404                    
    1405 00008550     09e4          MOVI    TIT_LRX+(10000H*400),A4 ;COORDINATE OF LOWER RIGHT OF HELP AREA
         00008560 01900185  
    1406 00008580     e264          SUBXY   A3,A4                   ;THIS IS SIZE OF REGION TO BLANK
    1407 00008590     0d5f          CALLA   BLNKAREA                ;BLANK OUT THE HELP AREA
         000085a0 00000000! 
    1408 000085c0     0b09          ADDI    BOX_XGAP,A9             ;RETURN X FOR HELP MENUS
         000085d0     0002  
    1409 000085e0     09af          MMFM    SP,A3,A4,A5,A6
         000085f0     0078  
    1410 00008600     0960          RETS
    1411                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   34

    1412              0000  HM_JUST          EQU     0
    1413              0010  HM_COLOR         EQU     HM_JUST+WORD_SIZE
    1414              0020  HM_ENTS          EQU     HM_COLOR+WORD_SIZE
    1415              0030  HM_DATA          EQU     HM_ENTS+WORD_SIZE      ;ENTRY POINTERS
    1416                    
    1417              0100  HS_ROUT          EQU     PDATA             ;LONG-TEXT ROUTINE
    1418              0120  HS_X             EQU     HS_ROUT+LONG_SIZE ;WORD-X FOR TEXT ROUTINE
    1419              0130  HS_Y             EQU     HS_X+WORD_SIZE    ;WORD-CURRENT Y
    1420              0140  HS_ENTS          EQU     HS_Y+WORD_SIZE    ;WORD-ENTRIES LEFT TO DO
    1421              0150  HS_COLOR         EQU     HS_ENTS+WORD_SIZE ;WORD-COLOR OF MENU
    1422              0160  HS_PTR           EQU     HS_COLOR+WORD_SIZE ;LONG-CURRENT TEXT POINTER
    1423                    
    1424 00008610           H_SLAVE:
    1425 00008610     4d21          MOVE    A9,A1                     ;PUT THIS X VALUE IN A1
    1426                    
    1427 00008620     b500          MOVE    *A8(HM_JUST),A0,W         ;0 = CENTER  1=LEFT
         00008630     0000  
    1428 00008640     ca06          JRZ     HS_CENT                   ;CENTER....SETUP X ACCORDINGLY
    1429 00008650     09e0          MOVI    STRLNRM,A0                ;LEFT JUSTIFY ROUTIN
         00008660 00000000! 
    1430 00008680     0b01          ADDI    MB_XWID+HELP_X_MARGIN,A1  ;ADD MARGIN TO FORM X FOR TEXT
         00008690     000d  
    1431 000086a0     c006          JRUC    CENTER_JOIN               ;CONTINUE
    1432                    
    1433 000086b0           HS_CENT:
    1434 000086b0     09e0          MOVI    STRCNRM,A0                ;USE CENTERING ROUTINE
         000086c0 00000000! 
    1435 000086e0     0b01          ADDI    TIT_LRX,A1
         000086f0     0185  
    1436 00008700     2fe1          SRL     1,A1                      ;THIS IS CENTER X
    1437                    
    1438 00008710           CENTER_JOIN:
    1439 00008710     b02d          MOVE    A1,*A13(HS_X),W           ;STORE X
         00008720     0120  
    1440 00008730     b20d          MOVE    A0,*A13(HS_ROUT),L        ;STORE ROUTINE
         00008740     0100  
    1441                    
    1442 00008750     b501          MOVE    *A8(HM_ENTS),A1,W         ;GET NUMBER OF ENTRIES
         00008760     0020  
    1443 00008770     b02d          MOVE    A1,*A13(HS_ENTS),W        ;COUNT IT DOWN IN P-AREA
         00008780     0140  
    1444                    
    1445 00008790     b500          MOVE    *A8(HM_COLOR),A0,W        ;GET COLOR
         000087a0     0010  
    1446 000087b0     b00d          MOVE    A0,*A13(HS_COLOR),W       ;STASH IT
         000087c0     0150  
    1447                    
    1448 000087d0     0b08          ADDI    HM_DATA,A8                ;POINT AT 1ST ENTRY
         000087e0     0030  
    1449 000087f0     b30d          MOVE    A8,*A13(HS_PTR),L         ;NOW WE'RE READY.
         00008800     0160  
    1450 00008810     09c5          MOVI    HELP_DY,A5                ;DISTANCE PER ENTRY
         00008820     000c  
    1451 00008830     5e25          MPYU    A1,A5                     ;DISTANCE FOR ALL ENTRIES
    1452 00008840     0b05          ADDI    HELP_Y_MARGIN+(MB_YWID*2)+HELP_YLO_MARGIN,A5
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   35

         00008850     0012  
    1453 00008860     0d3f          CALLR   TOP_IN_A10
         00008870     003a  
    1454 00008880     4d44          MOVE    A10,A4                    ;MOVE Y OVER
    1455 00008890     2604          SLL     16,A4                     ;MAKE ROOM FOR X
    1456 000088a0     4124          ADD     A9,A4                     ;PUT IN THE X...THIS IS UPPER LEFT!
    1457                    
    1458 000088b0     4145          ADD     A10,A5                    ;ADD BASE TO OFFSET
    1459 000088c0     2605          SLL     16,A5                     ;PUT IN Y POSITION
    1460 000088d0     0b05          ADDI    TIT_LRX,A5                ;ADD IN THE X FOR THE CORNER
         000088e0     0185  
    1461 000088f0     0b0a          ADDI    MB_YWID+HELP_Y_MARGIN,A10  ;Y OF 1ST ENTRY
         00008900     000b  
    1462 00008910     b14d          MOVE    A10,*A13(HS_Y),W           ;PUT AWAY
         00008920     0130  
    1463                    
    1464 00008930     b5a9          MOVE    *A13(HS_COLOR),A9,W       ;GET THE COLOR FOR DOBORDER
         00008940     0150  
    1465                    
    1466 00008950     0d3f          CALLR   STD_BORD
         00008960     ff93  
    1467 00008970           NEXT_HELP:
    1468 00008970     b7a2          MOVE    *A13(HS_PTR),A2,L         ;GET OUR CURRENT POINTER
         00008980     0160  
    1469 00008990     9648          MOVE    *A2+,A8,L                 ;GET THE CURRENT MESSAGE POINTER
    1470 000089a0     b24d          MOVE    A2,*A13(HS_PTR),L         ;AND PUT POINTER BACK
         000089b0     0160  
    1471                    
    1472 000089c0     5600          CLR     A0
    1473 000089d0     b7a1          MOVE    *A13(HS_ROUT),A1,L        ;ROUTINE IN A1
         000089e0     0100  
    1474 000089f0     b5a6          MOVE    *A13(HS_COLOR),A6,W       ;STUFF COLOR
         00008a00     0150  
    1475                    
    1476 00008a10     b5a9          MOVE    *A13(HS_Y),A9,W           ;GET Y
         00008a20     0130  
    1477 00008a30     2609          SLL     16,A9                     ;SHIFT INTO PLACE
    1478 00008a40     b5aa          MOVE    *A13(HS_X),A10,W
         00008a50     0120  
    1479 00008a60     4149          ADD     A10,A9                    ;A9 IS NOW POINTING AT SCREEN
    1480                    
    1481 00008a70     09ca          MOVI    SPACING07,A10             ;SPACING
         00008a80     0001  
    1482 00008a90     09eb          MOVI    RD7FONT,A11               ;FONT IS BABY FONT
         00008aa0 00000000! 
    1483 00008ac0                   JSRP    LM_FINIS                  ;PRINT IT OUT!
    1484                    
    1485 00008b30     b5a9          MOVE    *A13(HS_Y),A9,W           ;GET THE Y
         00008b40     0130  
    1486 00008b50     0b09          ADDI    HELP_DY,A9                ;KICK IT
         00008b60     000c  
    1487 00008b70     b12d          MOVE    A9,*A13(HS_Y),W           ;PUT IT BACK
         00008b80     0130  
    1488                    
    1489 00008b90     b5a0          MOVE    *A13(HS_ENTS),A0,W        ;ENTRY COUNT
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   36

         00008ba0     0140  
    1490 00008bb0     1420          DEC     A0
    1491 00008bc0     b00d          MOVE    A0,*A13(HS_ENTS),W        ;PUT IT BACK
         00008bd0     0140  
    1492 00008be0     cbd8          JRNZ    NEXT_HELP
    1493                    
    1494 00008bf0     c080          JAUC    SUCIDE                    ;OUR WORK IS DONE!
         00008c00 00000000! 
    1495                    
    1496 00008c20           TOP_IN_A10:
    1497 00008c20     098f          MMTM    SP,A5
         00008c30     0400  
    1498 00008c40     0b6a          CMPI    0FFFFH,A10                ;IS THE TOP HALF ZERO?
         00008c50 ffff0000  
    1499 00008c70     c302          JRHI    TOP_IS_TOP                ;TOP IS SET..RETURN
    1500 00008c80     2fe5          SRL     1,A5                      ;TOP OF BOX IS HALF UP FROM MAIN MENU BAR CENTER
    1501 00008c90     44aa          SUB     A5,A10                    ;NOW A10 HAS Y BASE OF BOX
    1502 00008ca0           TOP_IS_TOP:
    1503 00008ca0     09af          MMFM    SP,A5
         00008cb0     0020  
    1504 00008cc0     0960          RETS
    1505                    
    1506 00008cd0           AREUSURE:
    1507 00008cd0     0d5f          CALLA   CLR_SCRN             ;BLANK IT ALL OUT!
         00008ce0 00000000! 
    1508 00008d00     b32d          MOVE    A9,*A13(PDATA),L     ;SAVE ROUTINE
         00008d10     0100  
    1509 00008d20     a34c          MOVE    A10,-*A12,L          ;AND CONFIRM MESSAGE
    1510                    
    1511 00008d30     0d3f          CALLR   SURE_BOX
         00008d40     0060  
    1512                    
    1513 00008d50     4d02          MOVE    A8,A2                ;PUT MESSAGE TEXT IN SAFE PLACE
    1514 00008d60     09e8          MOVI    MESS_SURE,A8         ;SETUP FOR TITLE
         00008d70 00009ea0' 
    1515 00008d90     0d5f          CALLA   LM_SETUP             ;STUFF REGGIES
         00008da0 00000000! 
    1516 00008dc0     4c48          MOVE    A2,A8                ;GET STRING IN THERE
    1517 00008dd0                   JSRP    LM_FINIS             ;AND PRINT IT
    1518                    
    1519 00008e40     09e8          MOVI    M_SURE,A8            ;NOW THE "ARE YOU SURE" PART
         00008e50 00009f40' 
    1520 00008e70                   JSRP    L_MESS               ;PUT IT UP.
    1521                    
    1522 00008ee0     09e8          MOVI    MEN_YN,A8            ;PUT UP THE "YES/NO" SELECTOR.
         00008ef0 00000000! 
    1523 00008f10     09c9          MOVI    2,A9                 ;CURSOR ON 2ND ENTRY (NO)
         00008f20     0002  
    1524                    
    1525 00008f30                   JSRP    B_MENU               ;AND GET A RESPONSE.
    1526 00008fa0     0b48          CMPI    1,A8                 ;WAS IT YES?
         00008fb0     fffe  
    1527 00008fc0     cb1f          JRNZ    SURE_X               ;NOPE....GET OUT
    1528                    
    1529 00008fd0     0d5f          CALLA   CLR_SCRN             ;CLEAR THE SCREEN FIRST, SO ROUTINE CAN PLOT!
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   37

         00008fe0 00000000! 
    1530                    
    1531 00009000     b7a0          MOVE    *A13(PDATA),A0,L     ;GET THE ROUTINE TO CALL
         00009010     0100  
    1532 00009020     09e7          MOVI    SURE_RET,A7
         00009030 00009070' 
    1533 00009050     a2ec          MOVE    A7,-*A12,L           ;PUSH RETURN ADDRESS
    1534 00009060     0160          JUMP    A0                   ;AND "JSRP" THE ROUTINE
    1535                    
    1536 00009070           SURE_RET:
    1537 00009070     0d3f          CALLR   SURE_BOX             ;BOX IT!
         00009080     002c  
    1538 00009090     9788          MOVE    *A12+,A8,L
    1539 000090a0                   JSRP    SUR_MESS             ;PRINT THE MESSAGE
    1540                    
    1541 00009110                   JSRP    ANY_BUT              ;NOW RETRIEVE ANY BUTTON THEN RETURN
    1542                    
    1543 00009180     5600          CLR     A0                   ;RETURN SUCCESS
    1544 00009190                   RETP
    1545                    
    1546 000091c0           SURE_X: 
    1547 000091c0     0b0c          ADDI    LONG_SIZE,A12        ;POP MESSAGE
         000091d0     0020  
    1548 000091e0     09c0          MOVI    2,A0                 ;RETURN FAILURE
         000091f0     0002  
    1549 00009200                   RETP
    1550                    
    1551 00009230           SUR_MESS:
    1552 00009230     a30c          MOVE    A8,-*A12,L
    1553 00009240     09e8          MOVI    MESS_CONFIRM,A8
         00009250 0000a060' 
    1554 00009270     0d5f          CALLA   LM_SETUP             ;GET CONFIRMATION DATA READY.
         00009280 00000000! 
    1555 000092a0     9788          MOVE    *A12+,A8,L
    1556 000092b0                   JSRP    LM_FINIS             ;PRINT OUR PART
    1557 00009320                   RETP
    1558                    
    1559 00009350           SURE_BOX:
    1560 00009350     09c9          MOVI    COLOR_YELLOW,A9
         00009360     0505  
    1561 00009370     09e4          MOVI    003D0025H,A4
         00009380 003d0025  
    1562 000093a0     09e5          MOVI    00F6016AH,A5
         000093b0 00f6016a  
    1563 000093d0     c000          jruc    STD_BORD            ;BORDER-IZE THE WHOLE THING.
         000093e0     feeb  
    1564                    
    1565 000093f0           CENT_BOX:
    1566 000093f0     09c9          MOVI    ROBO_RED,A9
         00009400     0303  
    1567 00009410           CBOX_COL:
    1568 00009410     09e4          MOVI    00450025H,A4
         00009420 00450025  
    1569 00009440     09e5          MOVI    00B4016AH,A5
         00009450 00b4016a  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   38

    1570 00009470     c000          jruc    STD_BORD            ;BORDER-IZE THE WHOLE THING.
         00009480     fee1  
    1571                    
    1572                    
    1573              0032  INSTR_Y  EQU     INST_ULY+5
    1574              003c  INSTR_2Y EQU     INSTR_Y+10
    1575                    
    1576 00009490           MM_INST1
    1577 00009490                   MESS_MAC  RD7FONT,SPACING07,MENU_X,INSTR_Y,COLOR_BPR,STRCNRM,0
    1578 00009530       53          .byte   "SELECT WITH ANY STICK"
    1579 000095d8       00          .BYTE    0
    1580 000095e0                   .EVEN
    1581                    
    1582 000095e0           MM_INST2
    1583 000095e0                   MESS_MAC  RD7FONT,SPACING07,MENU_X,INSTR_2Y,COLOR_BPR,STRCNRM,0
    1584 00009680       41          .byte   "ACTIVATE WITH ANY BUTTON"
    1585 00009740       00          .BYTE    0
    1586 00009750                   .EVEN
    1587                    
    1588 00009750           MESS_DOOR
    1589 00009750                   MESS_MAC  RD7FONT,SPACING20,200,128,ROBO_RED,STRCNRM,0
    1590 000097f0       49          .byte  "INVALID GAME SETTINGS"
    1591 00009898       00          .BYTE    0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    1592 000098b0                   .EVEN
    1593                    
    1594 000098b0           MESS_FAIL
    1595 000098b0                   MESS_MAC  RD7FONT,SPACING20,200,112,ROBO_RED,STRCNRM,0
    1596 00009950       49          .byte  "INVALID GAME SETTINGS"
    1597 000099f8       00          .BYTE    0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    1598 00009a10                   .EVEN
    1599 00009a10                   MESS_MAC  RD7FONT,SPACING20,200,144,ROBO_WHITE,STRCNRM,0
    1600 00009ab0       41          .byte  "ATTEMPT TO RESTORE"
    1601 00009b40       00          .BYTE    0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    1602 00009b50                   .EVEN
    1603 00009b50                   MESS_MAC  RD7FONT,SPACING20,200,164,ROBO_WHITE,STRCNRM,0
    1604 00009bf0       46          .byte  "FACTORY SETTINGS HAS FAILED."
    1605 00009cd0       00          .BYTE     0,0
    1606 00009ce0                   .EVEN
    1607                    
    1608 00009ce0           MESS_BITCHIN
    1609 00009ce0       41          .byte   "ADJUSTMENTS OK",0
    1610 00009d60                   .even
    1611                    
    1612 00009d60           MESS_TITLE
    1613 00009d60                   MESS_MAC  RD15FONT,SPACING20,TM_X,TM_Y,ROBO_GREEN,STRCNRM,0
    1614                    
    1615              001c  RV_Y    EQU      TM_Y+18
    1616                    
    1617 00009e00           MESS_REV
    1618 00009e00                   MESS_MAC  RD7FONT,SPACING20,TM_X,RV_Y,ROBO_YELLOW,STRCNRM,0
    1619 00009ea0           MESS_SURE
    1620 00009ea0                   MESS_MAC  RD15FONT,SPACING20,200,102,ROBO_LF,STRCNRM,0
    1621 00009f40           M_SURE
    1622 00009f40                   MESS_MAC  RD15FONT,SPACING20,200,128,ROBO_YELLOW,STRCNRM,0
    1623 00009fe0       41          .byte   "ARE YOU SURE?"
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   39

    1624 0000a048       00          .BYTE       0,0
    1625 0000a060                   .EVEN
    1626                    
    1627 0000a060           MESS_CONFIRM
    1628 0000a060                    MESS_MAC  RD15FONT,SPACING20,200,115,COLOR_LF,STRCNRM,0
    1629                    
    1630                    
    1631              0100  OP_LINE_CHAR    equ     PDATA
    1632              0110  OP_LINE_LINE    equ     PDATA+WORD_SIZE
    1633              0120  OP_LETS         equ     OP_LINE_LINE+WORD_SIZE
    1634              0210  OP_STIME        equ     OP_LETS+(30 * BYTE_SIZE)
    1635              0220  OP_SVAL         equ     OP_STIME+WORD_SIZE
    1636                    
    1637              0019  LET_DIST_X      equ     25
    1638              0018  LET_DIST_Y      equ     24
    1639              000e  LET_BOX_CX      equ     14
    1640              0002  LET_BOX_CY      equ     2
    1641              0003  LET_BOX_WX      equ     3
    1642              0001  LET_BOX_WY      equ     1
    1643              00a3  LET_START_Y1    equ     163
    1644              00bb  LET_START_Y2    equ     LET_START_Y1+LET_DIST_Y
    1645              00d3  LET_START_Y3    equ     LET_START_Y2+LET_DIST_Y
    1646              00eb  LET_START_Y4    equ     LET_START_Y3+LET_DIST_Y
    1647              0037  LET_INST1       equ     55
    1648              0016  LET_START_X     equ     22
    1649              0003  LET_LINE_MAX    equ     3
    1650              000e  LET_CHAR_MAX    equ     14
    1651              000c  LET_TEXT_GAP    equ     12
    1652              006e  LET_TEXT1       equ     110
    1653              007a  LET_TEXT2       equ     LET_TEXT1+LET_TEXT_GAP
    1654              0086  LET_TEXT3       equ     LET_TEXT2+LET_TEXT_GAP
    1655              0019  OP_MAX_CHARS    equ     CMESS_CHARS-1
    1656              0000! FONT_T          .equ    osgfont_t
    1657                    
    1658                    
    1659 00000120                   .bss    BLINE   ,16
    1660 00000130                   .bss    BCHAR   ,16
    1661                    
    1662 0000a100            SUBR   opmsg_main
    1663                    
    1664                            .if     PRINTER
    1665                            movk    1,a0
    1666                            calla   PBADGUY
    1667                            .endif
    1668                    
    1669 0000a100     0d5f          calla   CLR_SCRN
         0000a110 00000000! 
    1670 0000a130     09e2          movi    opmsg_s,a2
         0000a140 0000cff0' 
    1671 0000a160     09c3          movi    ROBO_YELLOW,a3
         0000a170     0505  
    1672 0000a180                   JSRP    TOP_BOX                 ;KICK OUT TOP BOX
    1673                    
    1674 0000a1f0     09e8          movi    OMINST1,a8
         0000a200 0000d080' 
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   40

    1675 0000a220                   JSRP    print_multi
    1676                    
    1677 0000a290                   SLEEPK  1
    1678                    
    1679 0000a2d0     5708          clr     a8                      ;Do 4 rows of letters
    1680 0000a2e0     1bca          movk    30,a10
    1681 0000a2f0     0d3f          callr   OPPLOTLINE
         0000a300     0256  
    1682                    
    1683 0000a310     1828          movk    1,a8
    1684 0000a320     1bca          movk    30,a10
    1685 0000a330     0d3f          callr   OPPLOTLINE
         0000a340     0252  
    1686                    
    1687 0000a350     1848          movk    2,a8
    1688 0000a360     1bca          movk    30,a10
    1689 0000a370     0d3f          callr   OPPLOTLINE
         0000a380     024e  
    1690                    
    1691 0000a390     1868          movk    3,a8
    1692 0000a3a0     1bca          movk    30,a10
    1693 0000a3b0     0d3f          callr   OPPLOTLINE
         0000a3c0     024a  
    1694                    
    1695 0000a3d0     5600          clr     a0
    1696 0000a3e0     0580          move    a0,@BLINE
         0000a3f0 00000120- 
    1697 0000a410     0580          move    a0,@BCHAR
         0000a420 00000130- 
    1698                    
    1699 0000a440     5708          clr     a8
    1700 0000a450     b10d          move    a8,*a13(OP_LINE_LINE)   ;ON THE FIRST LINE
         0000a460     0110  
    1701                    
    1702 0000a470     0d3f          callr   OM_STARTLINE            ;INITIALIZE ALL THE FLAGS FOR IT
         0000a480     013d  
    1703                    
    1704 0000a490     574a          clr     a10
    1705 0000a4a0     182b          movk    1,a11
    1706 0000a4b0     0d3f          callr   BOXCHAR                 ;BOX INITIAL ONE
         0000a4c0     0212  
    1707                    
    1708 0000a4d0     182b          movk    1,a11
    1709 0000a4e0     0d3f          callr   OMPLOTTEXT
         0000a4f0     013e  
    1710                    
    1711                    
    1712 0000a500     5600          clr     a0
    1713 0000a510     b00d          move    a0,*a13(OP_SVAL)
         0000a520     0220  
    1714 0000a530     b00d          move    a0,*a13(OP_STIME)
         0000a540     0210  
    1715                    
    1716 0000a550           DOLOOP                                  ;>Loop for stick and things
    1717 0000a550                   SLEEPK  1
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   41

    1718                    
    1719 0000a590     0d3f          callr   om_getstick             ;Check out the player board
         0000a5a0     00f5  
    1720 0000a5b0     cb05          jrnz    do1                     ;switch closed?
    1721 0000a5c0     b00d          move    a0,*a13(OP_SVAL)        ;Clear timer and direction
         0000a5d0     0220  
    1722 0000a5e0     b00d          move    a0,*a13(OP_STIME)
         0000a5f0     0210  
    1723 0000a600     c0f4          jruc    DOLOOP
    1724 0000a610           do1
    1725 0000a610     b5a1          move    *a13(OP_SVAL),A1        ;Get last direction
         0000a620     0220  
    1726 0000a630                   ANDK    7,a1                    ;Mask off repeat bit
    1727 0000a650     4801          cmp     a0,a1
    1728 0000a660     ca06          jrz     do2                     ;Still same thing?
    1729 0000a670     b00d          move    a0,*a13(OP_SVAL)
         0000a680     0220  
    1730 0000a690     5621          clr     a1
    1731 0000a6a0     b02d          move    a1,*a13(OP_STIME)       ;Clear the timer
         0000a6b0     0210  
    1732 0000a6c0     c02a          jruc    DODONE                  ;Process initial hit
    1733 0000a6d0           do2
    1734 0000a6d0     b5a1          MOVE    *A13(OP_SVAL),A1        ;SNAG THE REPEAT BIT
         0000a6e0     0220  
    1735 0000a6f0     0b81          ANDI    80H,A1
         0000a700 ffffff7f  
    1736 0000a720     cb15          JRNZ    DO3                     ;BR = IN REPEAT MODE
    1737 0000a730     b5a0          MOVE    *A13(OP_STIME),A0       ;GET TIMER
         0000a740     0210  
    1738 0000a750     1020          INC     A0
    1739 0000a760     b00d          MOVE    A0,*A13(OP_STIME)
         0000a770     0210  
    1740 0000a780     0b40          CMPI    15,A0
         0000a790     fff0  
    1741 0000a7a0     1f60          btst    4,a0
    1742 0000a7b0     c8d9          JRLO    DOLOOP                  ;GO BACK TO SLEEP
    1743 0000a7c0     5600          CLR     A0
    1744 0000a7d0     b00d          MOVE    A0,*A13(OP_STIME)       ;CLEAR OUT THE TIMER
         0000a7e0     0210  
    1745 0000a7f0     b5a1          MOVE    *A13(OP_SVAL),A1
         0000a800     0220  
    1746 0000a810     4c20          MOVE    A1,A0
    1747 0000a820     0ba1          ORI     80H,A1                  ;PUT UPPER BIT ON
         0000a830 00000080  
    1748 0000a850     b02d          MOVE    A1,*A13(OP_SVAL)        ;SET DIRECTION WITH REPEAT ON
         0000a860     0220  
    1749 0000a870     c00f          JRUC    DODONE
    1750 0000a880           DO3
    1751 0000a880     b5a0          MOVE    *A13(OP_STIME),A0       ;GET TIMER
         0000a890     0210  
    1752 0000a8a0     1020          INC     A0
    1753 0000a8b0     b00d          MOVE    A0,*A13(OP_STIME)
         0000a8c0     0210  
    1754 0000a8d0     0b40          CMPI    5,A0
         0000a8e0     fffa  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   42

    1755 0000a8f0     c8c5          JRLO    DOLOOP                  ;GO BACK TO SLEEP
    1756 0000a900     5600          CLR     A0
    1757 0000a910     b00d          MOVE    A0,*A13(OP_STIME)       ;CLEAR OUT THE TIMER
         0000a920     0210  
    1758 0000a930     b5a0          MOVE    *A13(OP_SVAL),A0
         0000a940     0220  
    1759 0000a950                   ANDK    7,a0                    ;TURN OFF REPEAT BIT
    1760 0000a970           DODONE
    1761 0000a970     b5a1          move    *A13(OP_SVAL),a1        ;Get current entry
         0000a980     0220  
    1762 0000a990                   ANDK    7,a1
    1763 0000a9b0     05a8          move    @BLINE,a8
         0000a9c0 00000120- 
    1764 0000a9e0     05aa          move    @BCHAR,a10
         0000a9f0 00000130- 
    1765 0000aa10     576b          clr     a11
    1766 0000aa20     0d3f          callr   BOXCHAR                 ;UNHIGHLIGHT IT
         0000aa30     01bb  
    1767                    
    1768 0000aa40     0b41          CMPI    1,A1                    ;CHECK UP
         0000aa50     fffe  
    1769 0000aa60     cb02          JRNZ    DOC1
    1770 0000aa70     1428          DEC     A8
    1771 0000aa80     c035          JRUC    DOPROC
    1772 0000aa90           DOC1
    1773 0000aa90     0b41          CMPI    2,A1
         0000aaa0     fffd  
    1774 0000aab0     cb02          JRNZ    DOC2
    1775 0000aac0     1028          INC     A8
    1776 0000aad0     c030          JRUC    DOPROC
    1777 0000aae0           DOC2
    1778 0000aae0     0b41          CMPI    3,A1
         0000aaf0     fffc  
    1779 0000ab00     cb02          JRNZ    DOC3
    1780 0000ab10     142a          DEC     A10
    1781 0000ab20     c02b          JRUC    DOPROC
    1782 0000ab30           DOC3
    1783 0000ab30     0b41          CMPI    4,A1
         0000ab40     fffb  
    1784 0000ab50     cb02          JRNZ    DOC4
    1785 0000ab60     102a          INC     A10
    1786 0000ab70     c026          JRUC    DOPROC
    1787 0000ab80           DOC4
    1788 0000ab80     0b41          CMPI    5,A1                    ; DRAW BUTTON
         0000ab90     fffa  
    1789 0000aba0     cb15          JRNZ    DOCCLR                  ; WOOF WOOF
    1790 0000abb0                   SOUND1  select_snd1
    1791 0000ac10     0d3f          CALLR   OMADDCHAR               ; ADD THE CHAR IN A8/A10
         0000ac20     0109  
    1792 0000ac30     0b48          CMPI    0FFH,A8                 ; CHECK TO SEE IF DONE WITH ALL
         0000ac40     ff00  
    1793 0000ac50     ca37          JRZ     DOCEND
    1794 0000ac60     05a8          MOVE    @BLINE,A8
         0000ac70 00000120- 
    1795 0000ac90     05aa          MOVE    @BCHAR,A10
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   43

         0000aca0 00000130- 
    1796 0000acc0     182b          MOVK    1,A11
    1797 0000acd0     0d3f          CALLR   BOXCHAR                 ; TURN THE BOX BACK ON
         0000ace0     0190  
    1798 0000acf0     c085          JRUC    DOLOOP
    1799 0000ad00           DOCCLR
    1800 0000ad00     0b41          cmpi    6,a1                    ;Start button
         0000ad10     fff9  
    1801 0000ad20     cb82          jrne    DOLOOP
    1802                    
    1803 0000ad30     0d3f          callr   opmsg_clr
         0000ad40     0069  
    1804                    
    1805 0000ad50     c03d          jruc    DOCCLEAR
    1806                            
    1807 0000ad60     f3f7  cursor_snd4     .word   0f3f7H,08H,08083H,0     ;
    1808 0000ada0     f3f7  select_snd1     .word   0f3f7H,08H,08084H,0     ;select option sound
    1809 0000ade0           DOPROC
    1810 0000ade0                   SOUND1  cursor_snd4
    1811 0000ae40     4d08          move    a8,a8
    1812 0000ae50     c501          jrge    doc5
    1813 0000ae60     5708          clr     a8
    1814 0000ae70           doc5
    1815 0000ae70     0b48          cmpi    LET_LINE_MAX,a8
         0000ae80     fffc  
    1816 0000ae90     c601          jrle    doc6
    1817 0000aea0     1868          movk    LET_LINE_MAX,a8
    1818 0000aeb0           doc6
    1819 0000aeb0     4d4a          move    a10,a10
    1820 0000aec0     c501          jrge    doc7
    1821 0000aed0     19ca          movk    LET_CHAR_MAX,a10
    1822 0000aee0           doc7
    1823 0000aee0     0b4a          cmpi    LET_CHAR_MAX,a10
         0000aef0     fff1  
    1824 0000af00     c601          jrle    doc8
    1825 0000af10     574a          clr     a10
    1826 0000af20           doc8
    1827 0000af20     0588          move    a8,@BLINE
         0000af30 00000120- 
    1828 0000af50     058a          move    a10,@BCHAR
         0000af60 00000130- 
    1829 0000af80     182b          movk    1,a11
    1830 0000af90     0d3f          callr   BOXCHAR
         0000afa0     0164  
    1831 0000afb0     c000          jruc    DOLOOP
         0000afc0     ff58  
    1832                    
    1833                    
    1834                    
    1835 0000afd0           DOCEND
    1836 0000afd0                   SLEEPK  2                       ;GET EVERYBODY CAUGHT UP
    1837 0000b010     0d5f          CALLA   CLR_SCRN                ;CLEAR THE SCREEN
         0000b020 00000000! 
    1838 0000b040     0d3f          CALLR   SURE_BOX
         0000b050     fe2f  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   44

    1839 0000b060     09e8          MOVI    MESS_SUCCESS,A8         ;THIS IS SUCCESS MESSAGE
         0000b070 0000b200' 
    1840 0000b090           bmrism  JSRP    SUR_MESS                ;PRINT THE MESSAGE
    1841 0000b100     c080          jauc    ANY_BUT                 ;NOW RETRIEVE ANY BUTTON THEN RETURN
         0000b110 00000000! 
    1842                    
    1843 0000b130           DOCCLEAR
    1844 0000b130                   SLEEPK  2
    1845 0000b170     0d5f          CALLA   CLR_SCRN
         0000b180 00000000! 
    1846 0000b1a0     0d3f          CALLR   SURE_BOX
         0000b1b0     fe19  
    1847 0000b1c0     09e8          MOVI    MESS_CLEARED,A8
         0000b1d0 0000b280' 
    1848 0000b1f0     c0e9          jruc    bmrism
    1849                    
    1850                    
    1851 0000b200           MESS_SUCCESS
    1852 0000b200       4d          .byte   "MESSAGE STORED",0
    1853 0000b280                   .even
    1854                    
    1855 0000b280           MESS_CLEARED
    1856 0000b280       4d          .byte   "MESSAGE CLEARED",0
    1857 0000b300                   .even
    1858                    
    1859 0000b300           BLASTMESS:                              ;GUY ENTERED A WHOLE MESSAGE
    1860 0000b300     0d5f          calla   ADJ_PAGE
         0000b310 00000000! 
    1861 0000b330     5600          clr     a0
    1862 0000b340     09e7          movi    VALID_CUSTOM,a7
         0000b350 01404c20  
    1863 0000b370     0d5f          calla   WC_WORD
         0000b380 00000000! 
    1864 0000b3a0     0d5f          calla   F_ADC_S                 ;FIX UP THE CHECKSUM
         0000b3b0 00000000! 
    1865 0000b3d0     0960          rets
    1866                    
    1867                    
    1868                    
    1869 0000b3e0            SUBR   opmsg_clr
    1870                    
    1871 0000b3e0     0d5f          calla   ADJ_PAGE
         0000b3f0 00000000! 
    1872                    
    1873 0000b410     09e7          movi    CUSTOM_MESSAGE,a7
         0000b420 01404740  
    1874 0000b440     1862          movk    CMESS_LINES,a2
    1875 0000b450     5600  cxfelp  clr     a0
    1876 0000b460     0d5f          calla   WC_BYTEI                ;Write a null
         0000b470 00000000! 
    1877 0000b490     0b07          addi    CMESS_LINE_SIZE,a7
         0000b4a0     01a0  
    1878 0000b4b0     3ce2          dsj     a2,cxfelp
    1879                    
    1880 0000b4c0     0d5f          calla   F_ADC_S                 ;Refresh checksum
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   45

         0000b4d0 00000000! 
    1881 0000b4f0     c0e0          jruc    BLASTMESS
    1882                    
    1883                    
    1884                    
    1885                    
    1886 0000b500           om_getstick
    1887                    
    1888 0000b500                   PUSH    a1
    1889                    
    1890 0000b510     07a0          move    @SWITCH,a0,L
         0000b520 01600000  
    1891 0000b540     03e0          not     a0
    1892 0000b550     4c01          move    a0,a1
    1893 0000b560     0b80          andi    0004007fh,a0            ;P1 draw/start/stick
         0000b570 fffbff80  
    1894 0000b590     0b81          andi    00207f00h,a1            ;P2 draw/start/stick
         0000b5a0 ffdf80ff  
    1895 0000b5c0     2f01          srl     8,a1
    1896 0000b5d0     5420          or      a1,a0
    1897 0000b5e0     05a1          move    @SWITCH+32,a1
         0000b5f0 01600020  
    1898 0000b610     03e1          not     a1
    1899 0000b620     0b81          andi    07fH,a1                 ;P3 draw/stick
         0000b630 ffffff80  
    1900 0000b650     5420          or      a1,a0
    1901                    
    1902 0000b660     1fe0          btst    0,a0                    ;U
    1903 0000b670     ca02          jrz     og2
    1904 0000b680     1820          movk    1,a0
    1905 0000b690     c019          jruc    cxfex
    1906 0000b6a0           og2
    1907 0000b6a0     1fc0          btst    1,a0                    ;D
    1908 0000b6b0     ca02          jrz     og3
    1909 0000b6c0     1840          movk    2,a0
    1910 0000b6d0     c015          jruc    cxfex
    1911 0000b6e0           og3
    1912 0000b6e0     1fa0          btst    2,a0                    ;L
    1913 0000b6f0     ca02          jrz     og4
    1914 0000b700     1860          movk    3,a0
    1915 0000b710     c011          jruc    cxfex
    1916 0000b720           og4
    1917 0000b720     1f80          btst    3,a0                    ;R
    1918 0000b730     ca02          jrz     og5
    1919 0000b740     1880          movk    4,a0
    1920 0000b750     c00d          jruc    cxfex
    1921 0000b760           og5
    1922 0000b760     09c1          movi    070H,a1
         0000b770     0070  
    1923 0000b780     5001          and     a0,a1
    1924 0000b790     ca02          jrz     og6
    1925 0000b7a0     18a0          movk    5,a0
    1926 0000b7b0     c007          jruc    cxfex
    1927 0000b7c0           og6
    1928 0000b7c0     0b80          andi    0ffffff80h,a0           ;Any other bits are start buttons
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   46

         0000b7d0 0000007f  
    1929 0000b7f0     ca02          jrz     og7
    1930 0000b800     18c0          movk    6,a0
    1931 0000b810     c001          jruc    cxfex
    1932 0000b820           og7
    1933 0000b820     5600          clr     a0
    1934 0000b830           cxfex
    1935 0000b830                   PULL    a1
    1936 0000b840     4c00          move    a0,a0
    1937 0000b850     0960          rets
    1938                    
    1939                    
    1940                    
    1941 0000b860           OM_STARTLINE
    1942                    
    1943 0000b860                   PUSH    A0
    1944 0000b870     5600          CLR     A0
    1945 0000b880     b00d          MOVE    A0,*A13(OP_LETS)
         0000b890     0120  
    1946 0000b8a0     b00d          MOVE    A0,*A13(OP_LINE_CHAR)
         0000b8b0     0100  
    1947 0000b8c0                   PULL    A0
    1948                    
    1949 0000b8d0     0960          RETS
    1950                    
    1951                    
    1952 0000b8e0           OMPLOTTEXT
    1953                    
    1954 0000b8e0     098f          MMTM    SP,A8,A10,A11
         0000b8f0     00b0  
    1955                    
    1956 0000b900                   PUSH    A11
    1957 0000b910     09e8          MOVI    OMTSETUP,A8
         0000b920 0000d660' 
    1958 0000b940     0d5f          CALLA   LM_SETUP
         0000b950 00000000! 
    1959 0000b970     4da8          MOVE    A13,A8
    1960 0000b980     0b08          ADDI    OP_LETS,A8
         0000b990     0120  
    1961 0000b9a0     b5a9          MOVE    *A13(OP_LINE_LINE),A9,W
         0000b9b0     0110  
    1962 0000b9c0     24a9          SLL     5,A9
    1963 0000b9d0     0b29          ADDI    OMLOC,A9
         0000b9e0 0000c590' 
    1964 0000ba00     8729          MOVE    *A9,A9,L
    1965 0000ba10     2609          SLL     16,A9
    1966 0000ba20     098f          MMTM    SP,A3,A4,A9
         0000ba30     1840  
    1967 0000ba40     4d23          MOVE    A9,A3
    1968 0000ba50     0d03          SUBI    20000H,A3
         0000ba60 fffdffff  
    1969 0000ba80     09e4          MOVI    [LET_TEXT_GAP+2,394],A4
         0000ba90 000e018a  
    1970 0000bab0     0d5f          CALLA   BLNKAREA
         0000bac0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   47

    1971 0000bae0     09af          MMFM    SP,A3,A4,A9
         0000baf0     0218  
    1972 0000bb00     0b09          ADDI    200,A9
         0000bb10     00c8  
    1973 0000bb20                   JSRP    LM_FINIS
    1974                    
    1975 0000bb90                   PULL    A5
    1976 0000bba0     4ca5          MOVE    A5,A5                   ;FLAG FOR UNDERSCORE OR NOT
    1977 0000bbb0     ca0d          JRZ     NOUNDER
    1978 0000bbc0     09c6          movi    ROBO_LASER,a6
         0000bbd0     3e3e  
    1979 0000bbe0     09e8          movi    underscore_s,a8
         0000bbf0 0000d700' 
    1980 0000bc10     10a9          addk    5,a9                    ;SHIFT THE LITTLE GUY OVER
    1981 0000bc20                   JSRP    LM_FINIS
    1982 0000bc90           NOUNDER
    1983 0000bc90     09af          MMFM    SP,A8,A10,A11
         0000bca0     0d00  
    1984 0000bcb0     0960          RETS
    1985                    
    1986                    
    1987                    
    1988 0000bcc0           OMADDCHAR
    1989 0000bcc0                   PUSH    a8,a10
    1990                    
    1991 0000bce0     24a8          sll     5,a8
    1992 0000bcf0     0b28          addi    OLTAB,a8                ;+Base
         0000bd00 0000cd30' 
    1993 0000bd20     8708          move    *a8,a8,L
    1994 0000bd30     246a          sll     3,a10
    1995 0000bd40     4148          add     a10,a8                  ;char offset
    1996 0000bd50     8f00          movb    *a8,a0                  ;snag the char
    1997 0000bd60     0b40          cmpi    '_',a0
         0000bd70     ffa0  
    1998 0000bd80     cb09          jrne    fsri20
    1999                    
    2000 0000bd90     b5a1          move    *a13(OP_LINE_CHAR),a1   ;0BacHkspace
         0000bda0     0100  
    2001 0000bdb0     ca38          jrz     fsrix
    2002 0000bdc0     1421          dec     a1
    2003 0000bdd0     b02d          move    a1,*a13(OP_LINE_CHAR)
         0000bde0     0100  
    2004 0000bdf0     4c22          move    a1,a2
    2005 0000be00     5600          clr     a0
    2006 0000be10     c026          jruc    rubent
    2007                    
    2008 0000be20           fsri20
    2009 0000be20     0b40          cmpi    '^',a0
         0000be30     ffa1  
    2010 0000be40     cb1a          jrne    fsriaddchar
    2011                    
    2012 0000be50     576b          clr     a11
    2013 0000be60     0d3f          callr   OMPLOTTEXT              ; GET RID OF THE FLASHING UNDERSCORE
         0000be70     ffa6  
    2014 0000be80     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   48

    2015 0000be90     0580          move    a0,@BLINE
         0000bea0 00000120- 
    2016 0000bec0     0580          move    a0,@BCHAR
         0000bed0 00000130- 
    2017 0000bef0     0d3f          callr   OM_STORECMOS            ; WELL, BABY -- STORE IT
         0000bf00     0048  
    2018 0000bf10     b5a8          MOVE    *A13(OP_LINE_LINE),A8   ; GRAB THE LINE
         0000bf20     0110  
    2019 0000bf30     0b48          CMPI    2,A8
         0000bf40     fffd  
    2020 0000bf50     c921          JRHS    OMADONE
    2021 0000bf60     1028          INC     A8
    2022 0000bf70     b10d          MOVE    A8,*A13(OP_LINE_LINE)   ; ON THE FIRST LINE
         0000bf80     0110  
    2023 0000bf90     0d3f          CALLR   OM_STARTLINE            ; INITIALIZE ALL THE FLAGS FOR IT
         0000bfa0     ff8b  
    2024 0000bfb0     182b          MOVK    1,A11
    2025 0000bfc0     0d3f          CALLR   OMPLOTTEXT
         0000bfd0     ff90  
    2026 0000bfe0     c015          jruc    fsrix
    2027                    
    2028                    
    2029 0000bff0           fsriaddchar
    2030                    
    2031 0000bff0     b5a1          MOVE    *A13(OP_LINE_CHAR),A1
         0000c000     0100  
    2032 0000c010     4c22          MOVE    A1,A2
    2033 0000c020     0b41          CMPI    OP_MAX_CHARS,A1
         0000c030     ffe6  
    2034 0000c040     c926          JRHS    OMACMAX
    2035 0000c050     1021          INC     A1
    2036 0000c060     b02d          MOVE    A1,*A13(OP_LINE_CHAR)
         0000c070     0100  
    2037 0000c080           rubent
    2038 0000c080     4da8          move    a13,a8
    2039 0000c090     0b08          ADDI    OP_LETS,A8
         0000c0a0     0120  
    2040 0000c0b0     2462          SLL     3,A2
    2041 0000c0c0     4048          ADD     A2,A8                   ;OFFSET INTO LOCAL STORAGE
    2042 0000c0d0     8c08          MOVB    A0,*A8
    2043 0000c0e0     1108          ADDK    8,A8
    2044 0000c0f0     5600          CLR     A0
    2045 0000c100     8c08          MOVB    A0,*A8                  ;MAKE SURE ZERO TERMINATED
    2046 0000c110     182b          MOVK    1,A11
    2047 0000c120     0d3f          CALLR   OMPLOTTEXT
         0000c130     ff7a  
    2048 0000c140     09af  fsrix   MMFM    SP,A8,A10
         0000c150     0500  
    2049 0000c160     0960          RETS
    2050                    
    2051 0000c170           OMADONE                                 ;COME HERE WHEN REALLY DONE
    2052 0000c170     0d5f          CALLA   ADJ_PAGE                ;GUY ENTERED A WHOLE MESSAGE
         0000c180 00000000! 
    2053 0000c1a0     09e7          MOVI    VALID_CUSTOM,A7
         0000c1b0 01404c20  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   49

    2054 0000c1d0     09e0          MOVI    VALID_VALUE,A0
         0000c1e0 0000eabc  
    2055 0000c200     0d5f          CALLA   WC_WORD
         0000c210 00000000! 
    2056 0000c230     0d5f          CALLA   F_ADC_S                 ;FIX UP THE CHECKSUM
         0000c240 00000000! 
    2057 0000c260     09af          MMFM    SP,A8,A10
         0000c270     0500  
    2058 0000c280     09c8          MOVI    0FFH,A8                 ;FLAG DONE WITH EVERYTHING
         0000c290     00ff  
    2059 0000c2a0     0960          RETS
    2060                    
    2061 0000c2b0           OMACMAX
    2062 0000c2b0     09af          mmfm    sp,a8,a10
         0000c2c0     0500  
    2063 0000c2d0     576b          clr     a11
    2064 0000c2e0     0d3f          callr   BOXCHAR
         0000c2f0     002f  
    2065 0000c300     1868          movk    3,a8
    2066 0000c310     19ca          movk    14,a10
    2067 0000c320     0588          move    a8,@BLINE
         0000c330 00000120- 
    2068 0000c350     058a          move    a10,@BCHAR
         0000c360 00000130- 
    2069 0000c380     0960          rets
    2070                    
    2071                    
    2072                    
    2073 0000c390           OM_STORECMOS
    2074 0000c390     0d5f          CALLA   ADJ_PAGE                ;POINT AT ADJUSTMENTS PAGE
         0000c3a0 00000000! 
    2075 0000c3c0     b5a7          MOVE    *A13(OP_LINE_LINE),A7
         0000c3d0     0110  
    2076 0000c3e0     09c6          MOVI    CMESS_LINE_SIZE,A6
         0000c3f0     01a0  
    2077 0000c400     5ec7          MPYU    A6,A7                   ;OFFSET ME, BABY
    2078 0000c410     0b27          ADDI    CUSTOM_MESSAGE,A7       ;A7 IS CMOS LOCATION
         0000c420 01404740  
    2079 0000c440     4da6          MOVE    A13,A6
    2080 0000c450     0b06          ADDI    OP_LETS,A6              ;A6 IS THE PROCESS BLOCK LOC
         0000c460     0120  
    2081 0000c470     1b25          movk    CMESS_CHARS-1,a5        ;CHARS/LINE
    2082                    
    2083 0000c480           cmos_loop
    2084 0000c480     8ec0          movb    *a6,a0                  ;fetch a character
    2085 0000c490     0b80          andi    BYTE_MASK,A0
         0000c4a0 ffffff00  
    2086 0000c4c0     0d5f          calla   WC_BYTEI                ;WRITE A BYTE
         0000c4d0 00000000! 
    2087 0000c4f0     1106          addk    BYTE_SIZE,A6            ;POINT AT NEXT BYTE
    2088 0000c500     3d25          dsj     a5,cmos_loop
    2089                    
    2090 0000c510     5600          clr     a0
    2091 0000c520     0d5f          calla   WC_BYTEI                ;Write a null
         0000c530 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   50

    2092                    
    2093 0000c550     0d5f          calla   F_ADC_S                 ;REFRESH CHECKSUM
         0000c560 00000000! 
    2094                    
    2095 0000c580     0960          rets
    2096                    
    2097 0000c590 0000006e  OMLOC   .LONG   LET_TEXT1, LET_TEXT2, LET_TEXT3
    2098                    
    2099                    
    2100                    
    2101                    
    2102 0000c5f0           BOXCHAR
    2103 0000c5f0     098f          MMTM    SP,A1,A8,A10
         0000c600     40a0  
    2104                    
    2105 0000c610     09c1          MOVI    LET_DIST_Y,A1
         0000c620     0018  
    2106 0000c630     5f01          MPYU    A8,A1                           ; DISTANCE
    2107 0000c640     0b01          ADDI    LET_START_Y1-LET_BOX_CY,A1
         0000c650     00a1  
    2108 0000c660     2601          SLL     16,A1
    2109 0000c670     4c24          MOVE    A1,A4
    2110 0000c680     09c1          MOVI    LET_DIST_X,A1
         0000c690     0019  
    2111 0000c6a0     5f41          MPYU    A10,A1
    2112 0000c6b0     0b01          ADDI    LET_START_X-LET_BOX_CX,A1
         0000c6c0     0008  
    2113 0000c6d0     ec24          MOVX    A1,A4                           ; UPPER LEFT IN A4
    2114 0000c6e0     4c85          MOVE    A4,A5   
    2115 0000c6f0     09e0          MOVI    [LET_DIST_Y+LET_BOX_WY,LET_DIST_X+LET_BOX_WX],A0
         0000c700 0019001c  
    2116 0000c720     e005          ADDXY   A0,A5                           ; LOWER RIGHT IN A5
    2117                    
    2118 0000c730     09e0          MOVI    [1,1],A0                        ; BORDER HEIGHT,WIDTH
         0000c740 00010001  
    2119 0000c760     09c9          MOVI    ROBO_BLACK,A9                   ; DOBORDER IS RETARDED
         0000c770     1414  
    2120 0000c780     4d6b          MOVE    A11,A11
    2121 0000c790     ca02          JRZ     BC1
    2122 0000c7a0     09c9          MOVI    ROBO_LF,A9
         0000c7b0     3e3e  
    2123 0000c7c0           BC1
    2124 0000c7c0     0d3f          CALLR   DOBORDER
         0000c7d0     fb6c  
    2125                    
    2126 0000c7e0     4d6b          MOVE    A11,A11
    2127 0000c7f0     cb02          JRNZ    BC2
    2128 0000c800     09ca          MOVI    0FFH,A10
         0000c810     00ff  
    2129 0000c820           BC2
    2130 0000c820     0d3f          CALLR   OPPLOTLINE
         0000c830     0003  
    2131                    
    2132 0000c840     09af          MMFM    SP,A1,A8,A10
         0000c850     0502  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   51

    2133 0000c860     0960          RETS
    2134                    
    2135                    
    2136                    
    2137 00000140                   .bss    char_s  ,16
    2138                    
    2139 0000c870           OPPLOTLINE
    2140                    
    2141 0000c870                   PUSH    a8,a9,a10,a11
    2142                    
    2143 0000c890     4d09          move    a8,a9
    2144 0000c8a0     24a8          sll     5,a8                    ;*32
    2145 0000c8b0     0b28          addi    OLTAB,a8
         0000c8c0 0000cd30' 
    2146 0000c8e0     8708          move    *a8,a8,L
    2147 0000c8f0     2489          sll     4,a9
    2148 0000c900     0b29          addi    OLYTAB,a9
         0000c910 0000cdb0' 
    2149 0000c930     8529          move    *a9,a9
    2150                            
    2151 0000c940     2609          sll     16,a9                   ;Get in the y position
    2152 0000c950     12c9          addk    LET_START_X,a9
    2153 0000c960           pkvqlp
    2154 0000c960     8f00          movb    *a8,a0                  ;GRAB CHAR NUMBER
    2155 0000c970     4c00          move    a0,a0   
    2156 0000c980     ca2d          jrz     pkvqx
    2157 0000c990     05e0          movb    a0,@char_s
         0000c9a0 00000140- 
    2158 0000c9c0                   PUSH    a8
    2159 0000c9d0                   PUSH    a9
    2160 0000c9e0                   PUSH    a10
    2161 0000c9f0                   PUSH    a9
    2162 0000ca00     09e0          movi    REDPAL,a0               ;*Palette
         0000ca10 00000000! 
    2163 0000ca30     4d4a          move    a10,a10
    2164 0000ca40     cb03          jrnz    opl1
    2165 0000ca50     09e0          movi    WHITEPAL,a0
         0000ca60 00000000! 
    2166 0000ca80     0d5f  opl1    calla   pal_getf
         0000ca90 00000000! 
    2167 0000cab0     4c05          move    a0,a5
    2168                    
    2169 0000cac0     09e8          movi    OP_MESS,a8
         0000cad0 0000cc90' 
    2170 0000caf0     0d5f          calla   LM_SETUP
         0000cb00 00000000! 
    2171 0000cb20     4ca6          move    a5,a6                   ;Color
    2172 0000cb30                   PULL    a9                      ;SET THE POSITION OF THE CHAR
    2173 0000cb40     09e8          movi    char_s,a8
         0000cb50 00000140- 
    2174 0000cb70                   JSRP    LM_FINIS
    2175                    
    2176 0000cbe0                   PULL    a10
    2177 0000cbf0     142a          dec     a10
    2178 0000cc00                   PULL    a9
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   52

    2179 0000cc10                   PULL    a8
    2180 0000cc20     1108          addk    8,a8
    2181 0000cc30     0b09          addi    LET_DIST_X,a9
         0000cc40     0019  
    2182 0000cc50     c0d0          jruc    pkvqlp
    2183                    
    2184 0000cc60           pkvqx   PULL    a8,a9,a10,a11
    2185 0000cc80     0960          rets
    2186                    
    2187                    
    2188 0000cc90           OP_MESS
    2189 0000cc90                   MESS_MAC FONT_T,1,200,95,REDPAL,STRCNRM_1,0
    2190 0000cd30                   .even
    2191                    
    2192 0000cd30 0000cdf0' OLTAB   .long   OL1TAB, OL2TAB, OL3TAB, OL4TAB
    2193 0000cdb0     00a3  OLYTAB  .word   LET_START_Y1, LET_START_Y2, LET_START_Y3, LET_START_Y4
    2194                    
    2195 0000cdf0       41  OL1TAB  .byte   "ABCDEFGHI123?!_",0
    2196 0000ce70       4a  OL2TAB  .byte   "JKLMNOPQR456()_",0
    2197 0000cef0       53  OL3TAB  .byte   "STUVWXYZ 7890:_",0
    2198 0000cf70       5e  OL4TAB  .byte   "^_ #$&-./'   _^",0
    2199                    
    2200 0000cff0       4f  opmsg_s .byte   "OPERATOR MESSAGE",0
    2201 0000d080                   .even
    2202 0000d080           OMINST1
    2203 0000d080                   MESS_MAC RD7FONT,SPACING07,200,LET_INST1,ROBO_WHITE,STRCNRM,0
    2204 0000d120       55          .byte   "USE PLAYER 1 OR 2 CONTROLS TO ENTER A MESSAGE",0,1
    2205 0000d298       4f          .byte   "OF UP TO 3 LINES OF 25 LETTERS PER LINE.",0,1
    2206 0000d3e8       53          .byte   "SELECT end TO END EACH LINE.",0,1
    2207 0000d4d8       50          .byte   "PRESS PLAYER 1 OR 2 START TO CLEAR OUT MESSAGE.",0,0
    2208 0000d660                   .even
    2209                    
    2210 0000d660           OMTSETUP
    2211 0000d660                   MESS_MAC   RD7FONT,SPACING07,200,LET_INST1,ROBO_BLUE,STRCNRM,0
    2212 0000d700                   .even
    2213                    
    2214 0000d700       2d  underscore_s    .byte   "-",0
    2215 0000d710                   .even
    2216                    
    2217                    
    2218                    
    2219 0000d710            SUBRP  print_multi
    2220                    
    2221 0000d710                   PUSH    a2
    2222                    
    2223 0000d720     4d02          move    a8,a2
    2224 0000d730     0d5f          calla   LM_SETUP
         0000d740 00000000! 
    2225 0000d760     4d23          move    a9,a3           ;1st XY
    2226                    
    2227 0000d770           ikoylp  PUSH    a8
    2228 0000d780     4c48          move    a2,a8
    2229 0000d790     0d5f          calla   LM_SETUP
         0000d7a0 00000000! 
    2230 0000d7c0                   PULL    a8
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 05 00:13:12 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

test program                                                         PAGE   53

    2231                    
    2232 0000d7d0     4c69          move    a3,a9
    2233                    
    2234 0000d7e0                   JSRP    LM_FINIS
    2235 0000d850     0b23          addi    [12,0],a3       ;Next Y
         0000d860 000c0000  
    2236                    
    2237 0000d880     8f00          movb    *a8,a0
    2238 0000d890     1108          addk    8,a8
    2239 0000d8a0     4c00          move    a0,a0
    2240 0000d8b0     cbeb          jrnz    ikoylp
    2241                    
    2242 0000d8c0                   PULL    a2
    2243 0000d8d0                   RETP
    2244                    
    2245                    
    2246                    
    2247                    
    2248                    ASCIIE  .macro  str
    2249                    
    2250                            .var    i,c,e
    2251                            .eval   1,i
    2252                            .eval   1,e
    2253                            .loop   $symlen(str)
    2254                            .asg    :str(i):,c
    2255                            .byte   0ffh & (':c:'+e)
    2256                            .eval   i+1,i
    2257                            .eval   e+7,e
    2258                            .endloop
    2259                            .byte   0ffh & :e:
    2260                    
    2261                            .endm
    2262                    
    2263 0000d900       01          .byte   1,2,4,8,16,32,64,128    ;ID
    2264                    
    2265 0000d940                   ASCIIE  "NBA-JAM-COPYRIGHT-1993-MIDWAY-MANUFACTURING-COMPANY"
    2266 0000dae0                   ASCIIE  "ALL-RIGHTS-RESERVED"
    2267 0000db80                   ASCIIE  "PROGRAMMED-BY-SHAWN-LIPTAK-&-MARK-TURMELL-&-JAMIE-RIVETT"
    2268                    
    2269                    
    2270                    
    2271                    
    2272 0000dd50                   .end

 No Errors,  No Warnings
